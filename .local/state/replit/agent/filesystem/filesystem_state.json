{"file_contents":{"README-Docker.md":{"content":"# Docker Setup for File Sharing Application\n\nThis Docker setup provides a complete local development and production environment for the file sharing application.\n\n## üöÄ Quick Start\n\n### Production Setup\n```bash\n# Build and start the application\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop the application\ndocker-compose down\n```\n\nThe application will be available at: **http://localhost:3000**\n\n### Development Setup (with hot reload)\n```bash\n# Build and start in development mode\ndocker-compose -f docker-compose.dev.yml up -d\n\n# View logs\ndocker-compose -f docker-compose.dev.yml logs -f\n\n# Stop the application\ndocker-compose -f docker-compose.dev.yml down\n```\n\n## üìã What's Included\n\n### Services\n- **App Container**: Node.js application with Express backend and React frontend\n- **Database Container**: PostgreSQL 15 with persistent data storage\n- **Health Checks**: Automatic health monitoring for all services\n- **Networking**: Isolated Docker network for secure communication\n\n### Features\n- ‚úÖ **Full-stack application** (Frontend + Backend)\n- ‚úÖ **PostgreSQL database** with automatic setup\n- ‚úÖ **Persistent data storage** using Docker volumes\n- ‚úÖ **Health monitoring** with automatic restart\n- ‚úÖ **Development mode** with hot reload\n- ‚úÖ **Production optimized** builds\n- ‚úÖ **Database migrations** run automatically\n\n## üõ†Ô∏è Configuration\n\n### Environment Variables\nThe Docker setup automatically configures:\n- `DATABASE_URL`: Connection string for PostgreSQL\n- `NODE_ENV`: Environment (development/production)\n- `PORT`: Application port (5000)\n\n### Ports\n- **3000**: Application access port\n- **5432**: PostgreSQL database (exposed for debugging)\n- **5173**: Vite development server (dev mode only)\n\n## üìä Database\n\nThe PostgreSQL database is automatically:\n- Created with the name `fileshare`\n- Initialized with required tables via migrations\n- Configured with health checks\n- Backed by persistent Docker volumes\n\n### Database Access\n```bash\n# Connect to database from host\npsql -h localhost -p 5432 -U postgres -d fileshare\n\n# Or connect from within the container\ndocker-compose exec database psql -U postgres -d fileshare\n```\n\n## üîß Troubleshooting\n\n### Common Issues\n\n**Port conflicts:**\n```bash\n# Check if ports are in use\nlsof -i :3000\nlsof -i :5432\n\n# Use different ports if needed\ndocker-compose up -p 8000:5000\n```\n\n**Database connection issues:**\n```bash\n# Check database health\ndocker-compose exec database pg_isready -U postgres\n\n# View database logs\ndocker-compose logs database\n```\n\n**Application logs:**\n```bash\n# View all logs\ndocker-compose logs\n\n# View specific service logs\ndocker-compose logs app\ndocker-compose logs database\n\n# Follow logs in real-time\ndocker-compose logs -f app\n```\n\n### Rebuilding\n```bash\n# Rebuild after code changes (production)\ndocker-compose build\ndocker-compose up -d\n\n# Full rebuild with no cache\ndocker-compose build --no-cache\n```\n\n## üö® Important Notes\n\n1. **Data Persistence**: Database data persists between container restarts via Docker volumes\n2. **Network Security**: All communication between containers is isolated within Docker network\n3. **Health Monitoring**: Containers automatically restart if health checks fail\n4. **Development vs Production**: Use appropriate compose file for your needs\n\n## üÜò Commands Cheat Sheet\n\n```bash\n# Production\ndocker-compose up -d              # Start in background\ndocker-compose down               # Stop and remove containers\ndocker-compose down -v            # Stop and remove containers + volumes (‚ö†Ô∏è deletes data)\ndocker-compose logs -f            # Follow logs\ndocker-compose restart app        # Restart just the app\ndocker-compose build --no-cache   # Rebuild from scratch\n\n# Development\ndocker-compose -f docker-compose.dev.yml up    # Start dev mode\ndocker-compose -f docker-compose.dev.yml down  # Stop dev mode\ndocker-compose -f docker-compose.dev.yml logs  # View dev logs\n```\n\n## üìÅ Docker Files Structure\n```\n‚îú‚îÄ‚îÄ Dockerfile              # Production container\n‚îú‚îÄ‚îÄ Dockerfile.dev          # Development container  \n‚îú‚îÄ‚îÄ docker-compose.yml      # Production setup\n‚îú‚îÄ‚îÄ docker-compose.dev.yml  # Development setup\n‚îú‚îÄ‚îÄ docker-entrypoint.sh    # Container startup script\n‚îú‚îÄ‚îÄ .dockerignore           # Files to exclude from build\n‚îî‚îÄ‚îÄ init-db.sql            # Database initialization\n```","size_bytes":4393},"README-Production-Deploy.md":{"content":"# Production Deployment Guide\n\nThis guide covers deploying the File Sharing application in production using Docker.\n\n## Quick Start\n\n1. **Copy environment file:**\n   ```bash\n   cp .env.production.example .env.production\n   ```\n\n2. **Update production environment variables:**\n   Edit `.env.production` with secure values:\n   ```env\n   POSTGRES_DB=fileshare\n   POSTGRES_USER=postgres\n   POSTGRES_PASSWORD=YourSecurePassword123!\n   NODE_ENV=production\n   PORT=5000\n   ```\n\n3. **Deploy with Docker Compose:**\n   ```bash\n   docker-compose up -d\n   ```\n\n## Security Features\n\n### Database Security\n- Database port (5432) is not exposed to the host in production\n- Environment variables for configurable database credentials\n- Strong password defaults with option to override\n\n### Application Security\n- Production-optimized Node.js container\n- Health checks for both database and application\n- Proper SSL configuration for external databases\n\n## Migration Strategy\n\nThe application uses Drizzle ORM with the following migration approach:\n\n1. **drizzle-kit** is installed as a production dependency\n2. Migrations run automatically during container startup\n3. The entrypoint script waits for database readiness before running migrations\n4. Robust error handling if migrations fail\n\n### Manual Migration Commands\n\nIf you need to run migrations manually:\n\n```bash\n# Connect to the running container\ndocker exec -it file-share-app bash\n\n# Run migrations\nnpm run db:push\n\n# Generate new migrations (if needed)\nnpm run db:generate\n```\n\n## Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| POSTGRES_DB | Database name | fileshare |\n| POSTGRES_USER | Database user | postgres |\n| POSTGRES_PASSWORD | Database password | YourSecurePasswordHere123! |\n| NODE_ENV | Node environment | production |\n| PORT | Application port | 5000 |\n\n## Health Checks\n\n- **Database**: `pg_isready` check every 10s\n- **Application**: HTTP health endpoint check every 30s\n- **Startup**: 40s grace period for application startup\n\n## Troubleshooting\n\n### Migration Issues\nCheck container logs:\n```bash\ndocker logs file-share-app\n```\n\n### Database Connection Issues\nVerify database is healthy:\n```bash\ndocker logs file-share-db\n```\n\n### Manual Database Reset\nIf you need to reset the database:\n```bash\ndocker-compose down -v\ndocker-compose up -d\n```\n\n## Production Checklist\n\n- [ ] Update database credentials in `.env.production`\n- [ ] Verify database port is not exposed\n- [ ] Check application logs for successful migration\n- [ ] Test application health endpoint\n- [ ] Verify file upload functionality\n- [ ] Test authentication flow","size_bytes":2644},"docker-entrypoint.sh":{"content":"#!/bin/bash\nset -e\n\necho \"Starting file sharing application...\"\n\n# Set Docker environment flag for database detection\nexport DOCKER_ENV=true\n\n# Wait for database to be ready\necho \"Waiting for database to be ready...\"\nuntil pg_isready -h database -p 5432 -U ${POSTGRES_USER:-postgres}; do\n  echo \"Waiting for PostgreSQL...\"\n  sleep 2\ndone\n\necho \"Database is ready!\"\n\n# Run database migrations using Node.js runtime (no CLI tools required)\necho \"Running database migrations...\"\nif ! node server/migrate.js; then\n    echo \"‚ùå Database migration failed!\"\n    exit 1\nfi\n\n# Start the application\necho \"Starting application...\"\nexec \"$@\"","size_bytes":631},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI Storage Solution - replit.md\n\n## Overview\n\nThis is a modern cloud storage application built with a full-stack TypeScript architecture. The application provides secure file upload, management, and sharing capabilities with AWS S3 integration and Replit authentication. It features a React frontend with shadcn/ui components and an Express.js backend with PostgreSQL database storage.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for development and production builds\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Replit Auth with OpenID Connect\n- **Session Management**: express-session with PostgreSQL store\n- **File Storage**: AWS S3 with presigned URLs\n- **File Upload**: Multer for multipart form handling\n\n### Database Schema\n- **Users Table**: Stores user profile information (required for Replit Auth)\n- **Sessions Table**: Handles session persistence (required for Replit Auth)\n- **Files Table**: Tracks uploaded files with metadata, sharing settings, and S3 references\n\n## Key Components\n\n### Authentication System\n- **Provider**: Replit Auth using OpenID Connect\n- **Session Storage**: PostgreSQL-backed sessions with 7-day TTL\n- **Authorization**: Route-level protection with middleware\n- **User Management**: Automatic user creation/updates on login\n\n### File Management System\n- **Upload**: Drag-and-drop interface with progress tracking\n- **Storage**: AWS S3 with organized folder structure per user\n- **Metadata**: File size, MIME type, original name tracking\n- **Sharing**: Token-based public sharing with toggle controls\n- **Operations**: Download, delete, and share functionality\n\n### Database Layer\n- **ORM**: Drizzle with PostgreSQL dialect\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Migrations**: Schema versioning with drizzle-kit\n- **Types**: Auto-generated TypeScript types from schema\n\n## Data Flow\n\n1. **Authentication Flow**:\n   - User initiates login via Replit Auth\n   - OIDC provider validates credentials\n   - Session created and stored in PostgreSQL\n   - User profile upserted in database\n\n2. **File Upload Flow**:\n   - Client uploads file via multipart form\n   - Server validates file and user authentication\n   - File uploaded to S3 with user-specific key structure\n   - File metadata stored in PostgreSQL\n   - Client receives confirmation and updates UI\n\n3. **File Sharing Flow**:\n   - User toggles sharing for a file\n   - Server generates unique share token\n   - Public access URL created for shared files\n   - Share status persisted in database\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **@aws-sdk/client-s3**: AWS S3 file storage operations\n- **@radix-ui/***: Headless UI component primitives\n- **@tanstack/react-query**: Server state management\n- **drizzle-orm**: Type-safe database ORM\n\n### Authentication\n- **openid-client**: OpenID Connect authentication\n- **passport**: Authentication middleware\n- **connect-pg-simple**: PostgreSQL session store\n\n### Development Tools\n- **tsx**: TypeScript execution for development\n- **esbuild**: Production bundling for server\n- **tailwindcss**: Utility-first CSS framework\n\n## Deployment Strategy\n\n### Development Environment\n- **Runtime**: Node.js 20 with Replit modules\n- **Database**: PostgreSQL 16 module\n- **Port Configuration**: Internal port 5000, external port 80\n- **Hot Reload**: Vite HMR with Express middleware integration\n\n### Production Build\n- **Frontend**: Vite builds to `dist/public`\n- **Backend**: esbuild bundles server to `dist/index.js`\n- **Assets**: Static files served from built frontend\n- **Database**: Environment-based connection string\n\n### Environment Variables\n- `DATABASE_URL`: PostgreSQL connection string\n- `SESSION_SECRET`: Session encryption key\n- `AWS_ACCESS_KEY_ID`: S3 access credentials\n- `AWS_SECRET_ACCESS_KEY`: S3 secret key\n- `AWS_S3_BUCKET_NAME`: Target S3 bucket\n- `REPL_ID`: Replit application identifier\n\n## Changelog\n\nChangelog:\n- June 24, 2025. Initial setup\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":4587},"start-docker.sh":{"content":"#!/bin/bash\n\n# File Sharing Application - Docker Startup Script\nset -e\n\necho \"üê≥ File Sharing Application - Docker Setup\"\necho \"==========================================\"\n\n# Color codes for better output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Check if Docker is running\nif ! docker info > /dev/null 2>&1; then\n    echo -e \"${RED}‚ùå Docker is not running. Please start Docker and try again.${NC}\"\n    exit 1\nfi\n\n# Check if docker-compose is available (try both v1 and v2)\nif command -v docker-compose &> /dev/null; then\n    DOCKER_COMPOSE_CMD=\"docker-compose\"\nelif docker compose version &> /dev/null; then\n    DOCKER_COMPOSE_CMD=\"docker compose\"\nelse\n    echo -e \"${RED}‚ùå docker-compose is not installed. Please install docker-compose and try again.${NC}\"\n    exit 1\nfi\n\necho -e \"${GREEN}Using: $DOCKER_COMPOSE_CMD${NC}\"\n\n# Function to check port availability\ncheck_port() {\n    local port=$1\n    if lsof -i :$port >/dev/null 2>&1; then\n        echo -e \"${YELLOW}‚ö†Ô∏è  Warning: Port $port is already in use${NC}\"\n        return 1\n    fi\n    return 0\n}\n\n# Function to wait for service health\nwait_for_service() {\n    local service=$1\n    local max_attempts=30\n    local attempt=1\n    \n    echo -e \"${BLUE}‚è≥ Waiting for $service to be healthy...${NC}\"\n    \n    while [ $attempt -le $max_attempts ]; do\n        # Try to find the service in both production and dev compose files\n        local status=\"\"\n        if $DOCKER_COMPOSE_CMD ps --services 2>/dev/null | grep -q \"$service\"; then\n            status=$($DOCKER_COMPOSE_CMD ps \"$service\" 2>/dev/null | grep -o \"healthy\\|unhealthy\\|starting\" | head -1)\n        elif $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml ps --services 2>/dev/null | grep -q \"$service\"; then\n            status=$($DOCKER_COMPOSE_CMD -f docker-compose.dev.yml ps \"$service\" 2>/dev/null | grep -o \"healthy\\|unhealthy\\|starting\" | head -1)\n        fi\n        \n        if [ \"$status\" = \"healthy\" ]; then\n            echo -e \"${GREEN}‚úÖ $service is healthy!${NC}\"\n            return 0\n        fi\n        \n        echo \"Attempt $attempt/$max_attempts - $service status: ${status:-starting}...\"\n        sleep 2\n        ((attempt++))\n    done\n    \n    echo -e \"${RED}‚ùå $service failed to become healthy within timeout${NC}\"\n    return 1\n}\n\n# Function to show usage\nshow_usage() {\n    echo \"Usage: $0 [MODE]\"\n    echo \"\"\n    echo \"Modes:\"\n    echo \"  prod, production    - Start in production mode (default)\"\n    echo \"  dev, development    - Start in development mode with hot reload\"\n    echo \"  stop               - Stop all containers\"\n    echo \"  logs               - View logs\"\n    echo \"  restart            - Restart the application\"\n    echo \"  clean              - Stop containers and remove volumes (‚ö†Ô∏è  deletes data)\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  ./start-docker.sh                    # Start in production mode\"\n    echo \"  ./start-docker.sh dev                # Start in development mode\"\n    echo \"  ./start-docker.sh stop               # Stop all containers\"\n    echo \"  ./start-docker.sh logs               # View logs\"\n    echo \"\"\n}\n\n# Get mode from first argument, default to production\nMODE=${1:-prod}\n\ncase $MODE in\n    \"prod\"|\"production\")\n        echo -e \"${BLUE}üöÄ Starting in PRODUCTION mode...${NC}\"\n        \n        # Check port availability\n        check_port 3000 || echo -e \"${YELLOW}‚ö†Ô∏è  Continuing anyway...${NC}\"\n        check_port 5432 || echo -e \"${YELLOW}‚ö†Ô∏è  Continuing anyway...${NC}\"\n        \n        echo \"Building and starting containers...\"\n        if $DOCKER_COMPOSE_CMD up -d --build; then\n            echo \"\"\n            wait_for_service \"database\"\n            wait_for_service \"app\"\n            echo \"\"\n            echo -e \"${GREEN}‚úÖ Application started successfully!${NC}\"\n            echo -e \"${GREEN}üåê Access your application at: http://localhost:3000${NC}\"\n            echo -e \"${BLUE}üìä Database runs inside Docker network (not exposed to host for security)${NC}\"\n            echo \"\"\n            echo \"Commands:\"\n            echo \"  View logs: $DOCKER_COMPOSE_CMD logs -f\"\n            echo \"  Stop:      $DOCKER_COMPOSE_CMD down\"\n            echo \"  Status:    $DOCKER_COMPOSE_CMD ps\"\n        else\n            echo -e \"${RED}‚ùå Failed to start containers${NC}\"\n            exit 1\n        fi\n        ;;\n        \n    \"dev\"|\"development\")\n        echo -e \"${BLUE}üõ†Ô∏è  Starting in DEVELOPMENT mode...${NC}\"\n        \n        # Check port availability  \n        check_port 3000 || echo -e \"${YELLOW}‚ö†Ô∏è  Continuing anyway...${NC}\"\n        check_port 5432 || echo -e \"${YELLOW}‚ö†Ô∏è  Continuing anyway...${NC}\"\n        check_port 5173 || echo -e \"${YELLOW}‚ö†Ô∏è  Continuing anyway...${NC}\"\n        \n        echo \"Building and starting containers with hot reload...\"\n        if $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml up -d --build; then\n            echo \"\"\n            wait_for_service \"database\"\n            wait_for_service \"app\"\n            echo \"\"\n            echo -e \"${GREEN}‚úÖ Development environment started successfully!${NC}\"\n            echo -e \"${GREEN}üåê Access your application at: http://localhost:3000${NC}\"\n            echo -e \"${GREEN}üìä Database accessible at: localhost:5432${NC}\"\n            echo -e \"${GREEN}‚ö° Hot reload enabled for development${NC}\"\n            echo \"\"\n            echo \"Commands:\"\n            echo \"  View logs: $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml logs -f\"\n            echo \"  Stop:      $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml down\"\n            echo \"  Status:    $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml ps\"\n        else\n            echo -e \"${RED}‚ùå Failed to start development containers${NC}\"\n            exit 1\n        fi\n        ;;\n        \n    \"stop\")\n        echo \"üõë Stopping all containers...\"\n        $DOCKER_COMPOSE_CMD down 2>/dev/null || true\n        $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml down 2>/dev/null || true\n        echo \"‚úÖ All containers stopped.\"\n        ;;\n        \n    \"logs\")\n        echo \"üìã Showing logs...\"\n        if $DOCKER_COMPOSE_CMD ps | grep -q \"file-share-app\"; then\n            $DOCKER_COMPOSE_CMD logs -f\n        elif $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml ps | grep -q \"file-share-app-dev\"; then\n            $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml logs -f\n        else\n            echo \"‚ùå No containers are currently running.\"\n        fi\n        ;;\n        \n    \"restart\")\n        echo \"üîÑ Restarting application...\"\n        $DOCKER_COMPOSE_CMD restart app 2>/dev/null || $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml restart app 2>/dev/null || echo \"No containers to restart\"\n        echo \"‚úÖ Application restarted.\"\n        ;;\n        \n    \"clean\")\n        echo \"üßπ Cleaning up containers and volumes...\"\n        echo \"‚ö†Ô∏è  WARNING: This will delete all data in the database!\"\n        read -p \"Are you sure? (y/N): \" -n 1 -r\n        echo\n        if [[ $REPLY =~ ^[Yy]$ ]]; then\n            $DOCKER_COMPOSE_CMD down -v 2>/dev/null || true\n            $DOCKER_COMPOSE_CMD -f docker-compose.dev.yml down -v 2>/dev/null || true\n            docker system prune -f\n            echo \"‚úÖ Cleanup completed.\"\n        else\n            echo \"‚ùå Cleanup cancelled.\"\n        fi\n        ;;\n        \n    \"help\"|\"-h\"|\"--help\")\n        show_usage\n        ;;\n        \n    *)\n        echo \"‚ùå Unknown mode: $MODE\"\n        echo \"\"\n        show_usage\n        exit 1\n        ;;\nesac","size_bytes":7493},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test-docker.sh":{"content":"#!/bin/bash\n\n# Test script for Docker setup\necho \"üß™ Testing Docker setup for File Sharing Application\"\necho \"==================================================\"\n\n# Detect docker-compose command (try both v1 and v2)\nif command -v docker-compose &> /dev/null; then\n    DOCKER_COMPOSE_CMD=\"docker-compose\"\nelif docker compose version &> /dev/null; then\n    DOCKER_COMPOSE_CMD=\"docker compose\"\nelse\n    echo \"‚ùå docker-compose is not installed. Please install docker-compose and try again.\"\n    exit 1\nfi\n\n# Detect which compose file is running\nif $DOCKER_COMPOSE_CMD ps | grep -q \"file-share-app-dev\"; then\n    COMPOSE_FILE=\"-f docker-compose.dev.yml\"\n    echo \"üîç Detected: Development environment\"\nelif $DOCKER_COMPOSE_CMD ps | grep -q \"file-share-app\"; then\n    COMPOSE_FILE=\"\"\n    echo \"üîç Detected: Production environment\"\nelse\n    echo \"‚ùå No containers are running. Please start the application first.\"\n    exit 1\nfi\n\n# Function to test database connection\ntest_db_connection() {\n    echo \"Testing database connection...\"\n    if $DOCKER_COMPOSE_CMD $COMPOSE_FILE exec -T database psql -U postgres -d fileshare -c \"SELECT 1;\" &>/dev/null; then\n        echo \"‚úÖ Database connection successful\"\n        return 0\n    else\n        echo \"‚ùå Database connection failed\"\n        return 1\n    fi\n}\n\n# Function to test application health\ntest_app_health() {\n    echo \"Testing application health endpoint...\"\n    local max_attempts=30\n    local attempt=1\n    \n    while [ $attempt -le $max_attempts ]; do\n        if curl -f http://localhost:3000/api/health &>/dev/null; then\n            echo \"‚úÖ Application health check passed\"\n            return 0\n        fi\n        if [ $attempt -eq 1 ]; then\n            echo \"Waiting for application to be ready...\"\n        fi\n        sleep 2\n        ((attempt++))\n    done\n    \n    echo \"‚ùå Application health check failed after $max_attempts attempts\"\n    echo \"Application logs:\"\n    $DOCKER_COMPOSE_CMD $COMPOSE_FILE logs --tail=20 app 2>/dev/null || echo \"No logs available\"\n    return 1\n}\n\n# Function to test database migrations\ntest_migrations() {\n    echo \"Testing database table creation...\"\n    if $DOCKER_COMPOSE_CMD $COMPOSE_FILE exec -T database psql -U postgres -d fileshare -c \"\\dt\" | grep -q \"users\\|files\\|folders\\|sessions\"; then\n        echo \"‚úÖ Database tables exist (migrations successful)\"\n        return 0\n    else\n        echo \"‚ùå Database tables missing (migrations may have failed)\"\n        return 1\n    fi\n}\n\n# Run tests\necho \"\"\necho \"Running tests...\"\necho \"----------------\"\n\nPASSED=0\nTOTAL=3\n\ntest_db_connection && ((PASSED++))\ntest_app_health && ((PASSED++))\ntest_migrations && ((PASSED++))\n\necho \"\"\necho \"Test Results: $PASSED/$TOTAL tests passed\"\n\nif [ $PASSED -eq $TOTAL ]; then\n    echo \"üéâ All tests passed! Docker setup is working correctly.\"\n    exit 0\nelse\n    echo \"‚ö†Ô∏è  Some tests failed. Please check the logs.\"\n    echo \"Useful debugging commands:\"\n    echo \"  $DOCKER_COMPOSE_CMD $COMPOSE_FILE logs app\"\n    echo \"  $DOCKER_COMPOSE_CMD $COMPOSE_FILE logs database\"\n    echo \"  $DOCKER_COMPOSE_CMD $COMPOSE_FILE ps\"\n    exit 1\nfi","size_bytes":3124},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import bcrypt from 'bcrypt';\nimport { nanoid } from 'nanoid';\nimport passport from 'passport';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport session from 'express-session';\nimport connectPg from 'connect-pg-simple';\nimport rateLimit from 'express-rate-limit';\nimport type { Express, RequestHandler } from 'express';\nimport { storage } from './storage';\nimport { signupSchema, loginSchema } from '@shared/schema';\nimport { ZodError } from 'zod';\n\nexport function getSession() {\n  // Require SESSION_SECRET in production\n  const sessionSecret = process.env.SESSION_SECRET;\n  if (!sessionSecret) {\n    throw new Error('SESSION_SECRET environment variable is required');\n  }\n\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: sessionSecret,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nasync function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n}\n\nasync function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\nfunction normalizeEmail(email: string): string {\n  return email.trim().toLowerCase();\n}\n\n// Rate limiting for different endpoint types\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 requests per windowMs\n  message: { message: 'Too many authentication attempts, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst fileOpLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 30, // 30 file operations per minute\n  message: { message: 'Too many file operations, please slow down.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst uploadLimiter = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 10, // 10 uploads per 5 minutes\n  message: { message: 'Upload limit exceeded, please wait before uploading more files.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst contactLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 3, // 3 contact form submissions per hour\n  message: { message: 'Too many contact form submissions, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst sharedLimiter = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 20, // 20 shared file accesses per 5 minutes\n  message: { message: 'Too many requests to shared content, please slow down.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst generalApiLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 100, // 100 general API requests per minute\n  message: { message: 'Too many requests, please slow down.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Local strategy for email/password authentication\n  passport.use(new LocalStrategy(\n    {\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    async (email, password, done) => {\n      try {\n        const normalizedEmail = normalizeEmail(email);\n        const user = await storage.getUserByEmail(normalizedEmail);\n        if (!user) {\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        const isValidPassword = await verifyPassword(password, user.password);\n        if (!isValidPassword) {\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        return done(null, { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName });\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (user) {\n        done(null, { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName });\n      } else {\n        done(null, false);\n      }\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Signup endpoint with rate limiting\n  app.post('/api/auth/signup', authLimiter, async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = signupSchema.parse(req.body);\n      const normalizedEmail = normalizeEmail(email);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(normalizedEmail);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User with this email already exists' });\n      }\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(password);\n      const userId = nanoid();\n      \n      const newUser = await storage.createUser({\n        id: userId,\n        email: normalizedEmail,\n        password: hashedPassword,\n        firstName,\n        lastName,\n      });\n\n      // Regenerate session for security, then log the user in automatically after signup\n      req.session.regenerate((regenerateErr) => {\n        if (regenerateErr) {\n          console.error('Session regeneration error after signup:', regenerateErr);\n          return res.status(500).json({ message: 'Account created but session setup failed' });\n        }\n        \n        req.login({ id: newUser.id, email: newUser.email, firstName: newUser.firstName, lastName: newUser.lastName }, (err) => {\n          if (err) {\n            console.error('Login error after signup:', err);\n            return res.status(500).json({ message: 'Account created but login failed' });\n          }\n          res.json({ \n            success: true, \n            message: 'Account created successfully',\n            user: { id: newUser.id, email: newUser.email, firstName: newUser.firstName, lastName: newUser.lastName }\n          });\n        });\n      });\n    } catch (error) {\n      console.error('Signup error:', error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: 'Invalid input', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Login endpoint with rate limiting\n  app.post('/api/auth/login', authLimiter, async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      const normalizedEmail = normalizeEmail(email);\n      \n      passport.authenticate('local', (err: any, user: any, info: any) => {\n        if (err) {\n          console.error('Authentication error:', err);\n          return res.status(500).json({ message: 'Internal server error' });\n        }\n        \n        if (!user) {\n          return res.status(401).json({ message: info?.message || 'Invalid email or password' });\n        }\n\n        // Regenerate session for security before login\n        req.session.regenerate((regenerateErr) => {\n          if (regenerateErr) {\n            console.error('Session regeneration error:', regenerateErr);\n            return res.status(500).json({ message: 'Login failed due to session error' });\n          }\n          \n          req.login(user, (loginErr) => {\n            if (loginErr) {\n              console.error('Login error:', loginErr);\n              return res.status(500).json({ message: 'Login failed' });\n            }\n            \n            res.json({ \n              success: true, \n              message: 'Login successful',\n              user: { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName }\n            });\n          });\n        });\n      })(req, res);\n    } catch (error) {\n      console.error('Login validation error:', error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: 'Invalid input', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ message: 'Logout failed' });\n      }\n      req.session.destroy((sessionErr) => {\n        if (sessionErr) {\n          console.error('Session destroy error:', sessionErr);\n        }\n        res.clearCookie('connect.sid', {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === 'production',\n          sameSite: 'lax'\n        });\n        res.json({ success: true, message: 'Logout successful' });\n      });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: 'Unauthorized' });\n};\n\n// Export rate limiters for use in routes\nexport { \n  authLimiter, \n  fileOpLimiter, \n  uploadLimiter, \n  contactLimiter, \n  sharedLimiter, \n  generalApiLimiter \n};","size_bytes":9336},"server/db-docker.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: false // No SSL needed for local Docker PostgreSQL\n});\n\nexport const db = drizzle({ client: pool, schema });","size_bytes":449},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure WebSocket constructor with SSL options\nneonConfig.webSocketConstructor = ws;\n// Disable pipelining for better compatibility\nneonConfig.pipelineConnect = false;\n// Disable fetch connection cache to avoid SSL issues\nneonConfig.fetchConnectionCache = false;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false,\n    // Additional SSL options to handle certificate issues\n    checkServerIdentity: () => undefined\n  }\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":860},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Security headers\napp.use(helmet({\n  contentSecurityPolicy: process.env.NODE_ENV === 'production' ? {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"wss:\", \"ws:\"],\n    },\n  } : {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"wss:\", \"ws:\"],\n    },\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true,\n  },\n}));\n\n// CORS protection\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? (() => {\n        const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',');\n        if (!allowedOrigins) {\n          console.error('ALLOWED_ORIGINS environment variable is required in production');\n          process.exit(1);\n        }\n        return allowedOrigins;\n      })()\n    : true,\n  credentials: true,\n}));\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    \n    // Don't expose internal error messages in production\n    const message = process.env.NODE_ENV === 'production' \n      ? (status >= 500 ? \"Internal Server Error\" : err.message || \"Internal Server Error\")\n      : err.message || \"Internal Server Error\";\n\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    \n    // Only log full errors in development, sanitized in production\n    if (process.env.NODE_ENV === 'production') {\n      console.error(`${status} Error: ${err.message || 'Unknown error'}`);\n    } else {\n      console.error(err);\n    }\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n  port,\n  host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3548},"server/migrate.js":{"content":"#!/usr/bin/env node\n\n/**\n * Production database schema setup\n * This script ensures the database schema is properly synchronized\n */\n\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\nimport fs from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nasync function runMigrations() {\n  const databaseUrl = process.env.DATABASE_URL;\n  \n  if (!databaseUrl) {\n    console.error('‚ùå DATABASE_URL environment variable is required');\n    process.exit(1);\n  }\n\n  console.log('üîó Connecting to database...');\n  \n  const pool = new Pool({\n    connectionString: databaseUrl,\n    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n  });\n\n  const db = drizzle(pool);\n\n  try {\n    console.log('üîÑ Setting up database schema...');\n    \n    // Test database connectivity first\n    console.log('üîó Testing database connection...');\n    await db.execute('SELECT 1 as test');\n    console.log('‚úÖ Database connection successful!');\n    \n    // Check if we should use drizzle-kit for schema synchronization\n    const useSchemaSync = !fs.existsSync(join(__dirname, '..', 'migrations'));\n    \n    if (useSchemaSync) {\n      console.log('üìù Using schema synchronization approach');\n      console.log('üîß Attempting to synchronize database schema...');\n      \n      // Try to run schema synchronization using npm run command\n      try {\n        const { spawn } = await import('child_process');\n        \n        console.log('üîß Running: npm run db:push');\n        // Execute npm run db:push command with proper environment\n        const pushProcess = spawn('npm', ['run', 'db:push'], {\n          stdio: 'inherit',\n          env: { ...process.env, DATABASE_URL: databaseUrl },\n          cwd: join(__dirname, '..')\n        });\n        \n        await new Promise((resolve, reject) => {\n          pushProcess.on('close', (code) => {\n            if (code === 0) {\n              console.log('‚úÖ Schema synchronized successfully!');\n              resolve();\n            } else {\n              reject(new Error(`Schema push failed with code ${code}`));\n            }\n          });\n          pushProcess.on('error', reject);\n        });\n        \n      } catch (error) {\n        console.log('‚ö†Ô∏è  drizzle-kit not available, checking if tables exist...');\n        \n        // Verify critical tables exist\n        const tables = ['users', 'files', 'folders', 'shared_files'];\n        let missingTables = [];\n        \n        for (const table of tables) {\n          try {\n            await db.execute(`SELECT 1 FROM ${table} LIMIT 1`);\n          } catch (err) {\n            if (err.message.includes('does not exist')) {\n              missingTables.push(table);\n            }\n          }\n        }\n        \n        if (missingTables.length > 0) {\n          console.error(`‚ùå Missing tables: ${missingTables.join(', ')}`);\n          console.error('Schema synchronization failed. Please ensure the database is properly initialized.');\n          process.exit(1);\n        }\n        \n        console.log('‚úÖ All required tables exist in database');\n      }\n    } else {\n      console.log('üìÅ Found migrations folder, running file-based migrations...');\n      const { migrate } = await import('drizzle-orm/node-postgres/migrator');\n      await migrate(db, { migrationsFolder: join(__dirname, '..', 'migrations') });\n      console.log('‚úÖ File-based migrations completed successfully!');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Migration failed:', error.message);\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Only run if this script is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runMigrations().catch((error) => {\n    console.error('‚ùå Unexpected error:', error);\n    process.exit(1);\n  });\n}\n\nexport { runMigrations };","size_bytes":3949},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Map to track ongoing token refresh operations to prevent race conditions\nconst refreshPromises = new Map<string, Promise<boolean>>();\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    password: \"\", // OIDC users do not have a password, set as empty string\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\n/**\n * Performs token refresh with race condition protection\n * Only one refresh operation per session is allowed at a time\n */\nasync function performTokenRefresh(sessionId: string, user: any): Promise<any | null> {\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    return null;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    \n    // Return updated user data so concurrent requests can use it\n    return {\n      access_token: user.access_token,\n      refresh_token: user.refresh_token,\n      expires_at: user.expires_at,\n      claims: user.claims\n    };\n  } catch (error) {\n    console.error(\"Token refresh failed:\", error);\n    return null;\n  }\n}\n\n/**\n * Clears user session and responds with 401\n */\nfunction clearSessionAndRespond(req: any, res: any, message = \"Unauthorized\") {\n  req.logout((err: any) => {\n    if (err) {\n      console.error(\"Error during logout:\", err);\n    }\n    req.session?.destroy(() => {\n      res.clearCookie(\"connect.sid\").status(401).json({ message });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    clearSessionAndRespond(req, res, \"No refresh token available\");\n    return;\n  }\n\n  const sessionId = req.sessionID || req.session?.id;\n  if (!sessionId) {\n    // No session ID available - cannot safely implement locking\n    return res.status(401).json({ message: \"Invalid session\" });\n  }\n  \n  // Check if there's already a refresh operation in progress for this session\n  let refreshPromise = refreshPromises.get(sessionId);\n  \n  if (!refreshPromise) {\n    // Create new refresh operation and store the promise\n    refreshPromise = performTokenRefresh(sessionId, user).finally(() => {\n      // Clean up the promise when done (success or failure)\n      refreshPromises.delete(sessionId);\n    });\n    refreshPromises.set(sessionId, refreshPromise);\n  }\n\n  try {\n    // Wait for the refresh operation to complete\n    const updatedUserData = await refreshPromise;\n    \n    if (updatedUserData) {\n      // Update current request's user object with fresh tokens\n      Object.assign(req.user, updatedUserData);\n      \n      // Persist the updated session data\n      return new Promise<void>((resolve, reject) => {\n        req.login(req.user, (err) => {\n          if (err) {\n            console.error(\"Error saving updated session:\", err);\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      })\n      .then(() => next())\n      .catch((error) => {\n        console.error(\"Session save error:\", error);\n        clearSessionAndRespond(req, res, \"Session save error\");\n      });\n    } else {\n      clearSessionAndRespond(req, res, \"Token refresh failed\");\n      return;\n    }\n  } catch (error) {\n    console.error(\"Error waiting for token refresh:\", error);\n    clearSessionAndRespond(req, res, \"Token refresh error\");\n    return;\n  }\n};\n","size_bytes":7007},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  setupAuth, \n  isAuthenticated, \n  fileOpLimiter, \n  uploadLimiter, \n  contactLimiter, \n  sharedLimiter, \n  generalApiLimiter \n} from \"./auth\";\nimport { s3Service } from \"./services/s3Service\";\nimport { \n  storeS3CredentialsInSession, \n  getS3CredentialsFromSession, \n  clearS3CredentialsFromSession, \n  hasS3CredentialsInSession \n} from \"./services/sessionCredentials\";\nimport multer from \"multer\";\nimport { insertFileSchema, shareFileSchema, insertFolderSchema, shareFolderSchema, loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { nanoid } from \"nanoid\";\nimport { ZodError } from \"zod\";\n\n// Validation schemas for API endpoints\nconst updateEmailSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\nconst updatePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters long\"),\n});\n\nconst contactFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  category: z.string().min(1, \"Please select a category\"),\n  message: z.string().min(10, \"Message must be at least 10 characters long\"),\n});\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Apply general rate limiting to all API routes\n  app.use('/api', generalApiLimiter);\n\n  // Health check endpoint for Docker\n  app.get('/api/health', (_req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      res.json(req.user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Update email endpoint\n  app.post('/api/auth/update-email', isAuthenticated, async (req: any, res) => {\n    try {\n      const { email } = updateEmailSchema.parse(req.body);\n      const userId = req.user.id;\n      \n      const normalizedEmail = email.toLowerCase().trim();\n      \n      // Check if email is already in use\n      const existingUser = await storage.getUserByEmail(normalizedEmail);\n      if (existingUser && existingUser.id !== userId) {\n        return res.status(400).json({ message: \"Email is already in use\" });\n      }\n      \n      // Update user email\n      await storage.updateUserEmail(userId, normalizedEmail);\n      \n      res.json({ success: true, message: \"Email updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating email:\", error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update email\" });\n    }\n  });\n\n  // Update password endpoint\n  app.post('/api/auth/update-password', isAuthenticated, async (req: any, res) => {\n    try {\n      const { currentPassword, newPassword } = updatePasswordSchema.parse(req.body);\n      const userId = req.user.id;\n      \n      // Verify current password\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      if (!user.password) {\n        return res.status(400).json({ message: \"Password not set for this account\" });\n      }\n      \n      const bcrypt = await import('bcrypt');\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n      \n      // Hash and update new password\n      const hashedPassword = await bcrypt.hash(newPassword, 12);\n      await storage.updateUserPassword(userId, hashedPassword);\n      \n      res.json({ success: true, message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating password:\", error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update password\" });\n    }\n  });\n\n  // Contact form endpoint\n  app.post('/api/contact', contactLimiter, async (req, res) => {\n    try {\n      const { name, email, subject, category, message } = contactFormSchema.parse(req.body);\n      \n      // Here you would typically send an email or save to a support system\n      // For now, we'll just log it and return success\n      console.log('Contact form submission:', {\n        name,\n        email: email.toLowerCase().trim(),\n        subject,\n        category,\n        message,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json({ \n        success: true, \n        message: \"Your message has been sent successfully. We'll get back to you soon!\" \n      });\n    } catch (error) {\n      console.error(\"Error processing contact form:\", error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // File upload endpoint\n  app.post('/api/files/upload', isAuthenticated, uploadLimiter, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const userId = req.user.id;\n      const { buffer, originalname, mimetype, size } = req.file;\n      const folderId = req.body.folderId ? parseInt(req.body.folderId) : undefined;\n\n      // Upload to S3\n      const uploadResult = await s3Service.uploadFile(\n        buffer,\n        originalname,\n        mimetype,\n        userId\n      );\n\n      // Save file metadata to database\n      const fileData = insertFileSchema.parse({\n        userId,\n        folderId,\n        name: originalname,\n        originalName: originalname,\n        mimeType: mimetype,\n        size,\n        s3Key: uploadResult.key,\n        s3Bucket: uploadResult.bucket,\n      });\n\n      const file = await storage.createFile(fileData);\n\n      // Invalidate analytics cache and broadcast update\n      invalidateAnalyticsCache(userId);\n\n      res.json({\n        success: true,\n        file: {\n          ...file,\n          url: uploadResult.location,\n        },\n      });\n    } catch (error) {\n      console.error(\"File upload error:\", error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid file data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  // Get user files and folders\n  app.get('/api/files', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const folderId = req.query.folderId ? parseInt(req.query.folderId as string) : undefined;\n      const files = await storage.getFilesByUserId(userId, folderId);\n      const folders = await storage.getFoldersByUserId(userId, folderId);\n      res.json({ files, folders });\n    } catch (error) {\n      console.error(\"Error fetching files:\", error);\n      res.status(500).json({ message: \"Failed to fetch files\" });\n    }\n  });\n\n  // Create folder\n  app.post('/api/folders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const folderData = insertFolderSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const folder = await storage.createFolder(folderData);\n      \n      // Invalidate analytics cache and broadcast update\n      invalidateAnalyticsCache(userId);\n      \n      res.json({ success: true, folder });\n    } catch (error) {\n      console.error(\"Folder creation error:\", error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid folder data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create folder\" });\n    }\n  });\n\n  // Share folder\n  app.post('/api/folders/:id/share', isAuthenticated, async (req: any, res) => {\n    try {\n      const folderId = parseInt(req.params.id);\n      const userId = req.user.id;\n      const { isShared } = shareFolderSchema.parse(req.body);\n      \n      const folder = await storage.getFolderById(folderId);\n      if (!folder || folder.userId !== userId) {\n        return res.status(404).json({ message: \"Folder not found\" });\n      }\n\n      const shareToken = isShared ? nanoid() : undefined;\n      const updatedFolder = await storage.updateFolderSharing(folderId, isShared, shareToken);\n\n      // Invalidate analytics cache and broadcast update (sharing affects analytics)\n      invalidateAnalyticsCache(userId);\n\n      let shareUrl = undefined;\n      if (isShared && shareToken) {\n        const baseUrl = req.protocol + '://' + req.get('host');\n        shareUrl = `${baseUrl}/api/shared/folder/${shareToken}`;\n      }\n\n      res.json({\n        success: true,\n        folder: updatedFolder,\n        shareUrl,\n      });\n    } catch (error) {\n      console.error(\"Error sharing folder:\", error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid share data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to share folder\" });\n    }\n  });\n\n  // Delete folder\n  app.delete('/api/folders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const folderId = parseInt(req.params.id);\n      const userId = req.user.id;\n      \n      const folder = await storage.getFolderById(folderId);\n      if (!folder || folder.userId !== userId) {\n        return res.status(404).json({ message: \"Folder not found\" });\n      }\n\n      await storage.deleteFolder(folderId);\n      \n      // Invalidate analytics cache and broadcast update\n      invalidateAnalyticsCache(userId);\n      \n      res.json({ success: true, message: \"Folder deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting folder:\", error);\n      res.status(500).json({ message: \"Failed to delete folder\" });\n    }\n  });\n\n  // Download file\n  app.get('/api/files/:id/download', isAuthenticated, fileOpLimiter, async (req: any, res) => {\n    try {\n      const fileId = parseInt(req.params.id);\n      const userId = req.user.id;\n      \n      const file = await storage.getFileById(fileId);\n      if (!file || file.userId !== userId) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      const downloadUrl = await s3Service.getFileUrl(file.s3Key);\n      res.json({ downloadUrl });\n    } catch (error) {\n      console.error(\"Error generating download URL:\", error);\n      res.status(500).json({ message: \"Failed to generate download URL\" });\n    }\n  });\n\n  // Share file\n  app.post('/api/files/:id/share', isAuthenticated, fileOpLimiter, async (req: any, res) => {\n    try {\n      const fileId = parseInt(req.params.id);\n      const userId = req.user.id;\n      const { isShared } = shareFileSchema.parse(req.body);\n      \n      const file = await storage.getFileById(fileId);\n      if (!file || file.userId !== userId) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      const shareToken = isShared ? nanoid() : undefined;\n      const updatedFile = await storage.updateFileSharing(fileId, isShared, shareToken);\n\n      // Invalidate analytics cache and broadcast update (sharing affects analytics)\n      invalidateAnalyticsCache(userId);\n\n      let shareUrl = undefined;\n      if (isShared && shareToken) {\n        const baseUrl = req.protocol + '://' + req.get('host');\n        shareUrl = `${baseUrl}/api/shared/file/${shareToken}`;\n      }\n\n      res.json({\n        success: true,\n        file: updatedFile,\n        shareUrl,\n      });\n    } catch (error) {\n      console.error(\"Error sharing file:\", error);\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid share data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to share file\" });\n    }\n  });\n\n  // Access shared file\n  app.get('/api/shared/file/:token', sharedLimiter, async (req, res) => {\n    try {\n      const { token } = req.params;\n      const file = await storage.getSharedFile(token);\n      \n      if (!file || !file.isShared) {\n        return res.status(404).json({ message: \"Shared file not found\" });\n      }\n\n      const downloadUrl = await s3Service.getFileUrl(file.s3Key, 300); // 5 minutes\n      res.json({\n        file: {\n          name: file.name,\n          size: file.size,\n          mimeType: file.mimeType,\n          uploadedAt: file.uploadedAt,\n        },\n        downloadUrl,\n      });\n    } catch (error) {\n      console.error(\"Error accessing shared file:\", error);\n      res.status(500).json({ message: \"Failed to access shared file\" });\n    }\n  });\n\n  // Access shared folder\n  app.get('/api/shared/folder/:token', sharedLimiter, async (req, res) => {\n    try {\n      const { token } = req.params;\n      const folder = await storage.getSharedFolder(token);\n      \n      if (!folder || !folder.isShared) {\n        return res.status(404).json({ message: \"Shared folder not found\" });\n      }\n\n      const files = await storage.getFilesByUserId(folder.userId, folder.id);\n      const subfolders = await storage.getFoldersByUserId(folder.userId, folder.id);\n\n      res.json({\n        folder: {\n          name: folder.name,\n          createdAt: folder.createdAt,\n        },\n        files,\n        subfolders,\n      });\n    } catch (error) {\n      console.error(\"Error accessing shared folder:\", error);\n      res.status(500).json({ message: \"Failed to access shared folder\" });\n    }\n  });\n\n  // Delete file\n  app.delete('/api/files/:id', isAuthenticated, fileOpLimiter, async (req: any, res) => {\n    try {\n      const fileId = parseInt(req.params.id);\n      const userId = req.user.id;\n      \n      const file = await storage.getFileById(fileId);\n      if (!file || file.userId !== userId) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n\n      // Delete from S3\n      await s3Service.deleteFile(file.s3Key);\n\n      // Delete from database\n      await storage.deleteFile(fileId);\n\n      // Invalidate analytics cache and broadcast update\n      invalidateAnalyticsCache(userId);\n\n      res.json({ success: true, message: \"File deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting file:\", error);\n      res.status(500).json({ message: \"Failed to delete file\" });\n    }\n  });\n\n  // Get storage statistics\n  app.get('/api/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const files = await storage.getFilesByUserId(userId);\n      const folders = await storage.getFoldersByUserId(userId);\n      \n      // Count S3 objects if connected\n      let s3ObjectCount = 0;\n      let s3TotalSize = 0;\n      const credentials = getS3CredentialsFromSession(userId);\n      \n      if (credentials && hasS3CredentialsInSession(userId)) {\n        try {\n          const buckets = await s3Service.listBuckets(credentials);\n          for (const bucket of buckets) {\n            // Paginate through all objects in the bucket\n            let continuationToken: string | undefined = undefined;\n            let hasMore = true;\n            \n            while (hasMore) {\n              const objects = await s3Service.listObjects(bucket.name, '', credentials, continuationToken, 1000);\n              s3ObjectCount += objects.objects.length;\n              s3TotalSize += objects.objects.reduce((sum, obj) => sum + (obj.size || 0), 0);\n              \n              continuationToken = objects.nextToken;\n              hasMore = objects.isTruncated && !!continuationToken;\n              \n              // Safety limit to prevent infinite loops\n              if (s3ObjectCount > 100000) {\n                console.warn(`S3 stats: Hit safety limit of 100k objects for user ${userId}`);\n                break;\n              }\n            }\n          }\n        } catch (s3Error) {\n          console.warn(\"Error fetching S3 stats:\", s3Error);\n          // Continue without S3 stats if there's an error\n        }\n      }\n      \n      const totalFiles = files.length + s3ObjectCount;\n      const totalFolders = folders.length;\n      const totalSize = files.reduce((sum, file) => sum + file.size, 0) + s3TotalSize;\n      const sharedFiles = files.filter(file => file.isShared).length;\n      const sharedFolders = folders.filter(folder => folder.isShared).length;\n      \n      // Mock total storage capacity (1TB)\n      const totalCapacity = 1024 * 1024 * 1024 * 1024; // 1TB in bytes\n\n      res.json({\n        totalFiles,\n        totalFolders,\n        totalSize,\n        sharedFiles: sharedFiles + sharedFolders,\n        totalCapacity,\n        usagePercentage: (totalSize / totalCapacity) * 100,\n      });\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Analytics cache - in-memory per user with TTL (keyed by userId:includeExternal)\n  const analyticsCache = new Map<string, { data: any; timestamp: number }>();\n  const CACHE_TTL = 2 * 60 * 1000; // 2 minutes for more responsive updates\n\n  // Server-Sent Events for real-time analytics updates\n  const analyticsEventClients = new Map<string, Set<any>>();\n  \n  // Broadcast analytics update event to user's SSE clients\n  const broadcastAnalyticsUpdate = (userId: string) => {\n    const userClients = analyticsEventClients.get(userId);\n    if (userClients) {\n      userClients.forEach(res => {\n        try {\n          res.write(`data: ${JSON.stringify({ type: 'analytics:update', timestamp: Date.now() })}\\n\\n`);\n        } catch (error) {\n          // Remove client if write fails (connection closed)\n          userClients.delete(res);\n        }\n      });\n    }\n  };\n  \n  // Clear analytics cache and broadcast update (clears all variants for user)\n  const invalidateAnalyticsCache = (userId: string) => {\n    // Clear all cache entries for this user (all includeExternal and selectedDisk variants)\n    const keysToDelete: string[] = [];\n    const allKeys = Array.from(analyticsCache.keys());\n    for (const key of allKeys) {\n      if (key.startsWith(`${userId}:`)) {\n        keysToDelete.push(key);\n      }\n    }\n    keysToDelete.forEach(key => analyticsCache.delete(key));\n    broadcastAnalyticsUpdate(userId);\n  };\n\n  // Analytics endpoint with comprehensive storage insights\n  app.get('/api/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const refresh = req.query.refresh === 'true';\n      const includeExternal = req.query.includeExternal === 'true';\n      const selectedDisk = req.query.selectedDisk as string;\n      \n      // Check cache first (keyed by userId, includeExternal, and selectedDisk)\n      const cacheKey = `${userId}:${includeExternal}:${selectedDisk || 'all'}`;\n      const cached = analyticsCache.get(cacheKey);\n      if (!refresh && cached && (Date.now() - cached.timestamp) < CACHE_TTL) {\n        return res.json(cached.data);\n      }\n\n      let files = await storage.getFilesByUserId(userId);\n      const folders = await storage.getFoldersByUserId(userId);\n      \n      // Filter files by selected disk if specified\n      if (selectedDisk) {\n        files = files.filter(file => file.s3Bucket === selectedDisk);\n      }\n      \n      // Base calculations from app-managed files\n      const totalSize = files.reduce((sum, file) => sum + file.size, 0);\n      const sharedFiles = files.filter(file => file.isShared).length;\n      const sharedFolders = folders.filter(folder => folder.isShared).length;\n      \n      // File type analysis\n      const filesByTypeMap = files.reduce((acc, file) => {\n        let type = 'Other';\n        if (file.mimeType) {\n          if (file.mimeType.startsWith('image/')) type = 'Images';\n          else if (file.mimeType.startsWith('video/')) type = 'Videos';\n          else if (file.mimeType.startsWith('audio/')) type = 'Audio';\n          else if (file.mimeType.includes('pdf')) type = 'PDFs';\n          else if (file.mimeType.includes('text/') || file.mimeType.includes('doc')) type = 'Documents';\n          else if (file.mimeType.includes('zip') || file.mimeType.includes('rar') || file.mimeType.includes('7z')) type = 'Archives';\n        }\n        \n        if (!acc[type]) acc[type] = { count: 0, bytes: 0 };\n        acc[type].count++;\n        acc[type].bytes += file.size;\n        return acc;\n      }, {} as Record<string, { count: number; bytes: number }>);\n\n      // Size distribution analysis\n      const sizeRanges = [\n        { min: 0, max: 10 * 1024, label: '0-10 KB' },\n        { min: 10 * 1024, max: 1024 * 1024, label: '10 KB - 1 MB' },\n        { min: 1024 * 1024, max: 100 * 1024 * 1024, label: '1-100 MB' },\n        { min: 100 * 1024 * 1024, max: 1024 * 1024 * 1024, label: '100 MB - 1 GB' },\n        { min: 1024 * 1024 * 1024, max: Infinity, label: '> 1 GB' }\n      ];\n\n      const sizeDistribution = sizeRanges.map(range => {\n        const filesInRange = files.filter(file => file.size >= range.min && file.size < range.max);\n        return {\n          range: range.label,\n          count: filesInRange.length,\n          bytes: filesInRange.reduce((sum, file) => sum + file.size, 0)\n        };\n      });\n\n      // Bucket usage analysis\n      const bucketUsageMap = files.reduce((acc, file) => {\n        const bucket = file.s3Bucket || 'Unknown';\n        if (!acc[bucket]) acc[bucket] = { count: 0, bytes: 0 };\n        acc[bucket].count++;\n        acc[bucket].bytes += file.size;\n        return acc;\n      }, {} as Record<string, { count: number; bytes: number }>);\n\n      // Top largest files\n      const topFiles = files\n        .sort((a, b) => b.size - a.size)\n        .slice(0, 10)\n        .map(file => ({\n          id: file.id,\n          name: file.name,\n          bytes: file.size,\n          mimeType: file.mimeType\n        }));\n\n      // Recent uploads (last 30 days)\n      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const recentUploads = files\n        .filter(file => file.uploadedAt && new Date(file.uploadedAt) > thirtyDaysAgo)\n        .sort((a, b) => {\n          const dateA = a.uploadedAt ? new Date(a.uploadedAt).getTime() : 0;\n          const dateB = b.uploadedAt ? new Date(b.uploadedAt).getTime() : 0;\n          return dateB - dateA;\n        })\n        .slice(0, 10)\n        .map(file => ({\n          id: file.id,\n          name: file.name,\n          bytes: file.size,\n          uploadedAt: file.uploadedAt\n        }));\n\n      // S3 external objects (if requested and credentials available)\n      let s3ObjectCount = 0;\n      let s3TotalSize = 0;\n      let isPartial = false;\n      const credentials = getS3CredentialsFromSession(userId);\n\n      if ((includeExternal || selectedDisk) && credentials && hasS3CredentialsInSession(userId)) {\n        try {\n          let bucketsToProcess = [];\n          \n          if (selectedDisk) {\n            // When a specific disk is selected, only process that bucket\n            bucketsToProcess = [{ name: selectedDisk }];\n          } else {\n            // When no specific disk is selected, process all buckets\n            const allBuckets = await s3Service.listBuckets(credentials);\n            bucketsToProcess = allBuckets;\n          }\n          \n          for (const bucket of bucketsToProcess) {\n            let continuationToken: string | undefined = undefined;\n            let hasMore = true;\n            \n            while (hasMore) {\n              const objects = await s3Service.listObjects(bucket.name, '', credentials, continuationToken, 1000);\n              s3ObjectCount += objects.objects.length;\n              s3TotalSize += objects.objects.reduce((sum, obj) => sum + (obj.size || 0), 0);\n              \n              // Add S3 objects to bucket usage\n              if (!bucketUsageMap[bucket.name]) {\n                bucketUsageMap[bucket.name] = { count: 0, bytes: 0 };\n              }\n              bucketUsageMap[bucket.name].count += objects.objects.length;\n              bucketUsageMap[bucket.name].bytes += objects.objects.reduce((sum, obj) => sum + (obj.size || 0), 0);\n              \n              // Add S3 objects to file types (infer from extension)\n              objects.objects.forEach(obj => {\n                let type = 'Other';\n                if (obj.key) {\n                  const ext = obj.key.split('.').pop()?.toLowerCase();\n                  if (ext && ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(ext)) type = 'Images';\n                  else if (ext && ['mp4', 'avi', 'mov', 'wmv', 'flv'].includes(ext)) type = 'Videos';\n                  else if (ext && ['mp3', 'wav', 'flac', 'aac'].includes(ext)) type = 'Audio';\n                  else if (ext && ['pdf'].includes(ext)) type = 'PDFs';\n                  else if (ext && ['doc', 'docx', 'txt', 'rtf'].includes(ext)) type = 'Documents';\n                  else if (ext && ['zip', 'rar', '7z', 'tar', 'gz'].includes(ext)) type = 'Archives';\n                }\n                \n                if (!filesByTypeMap[type]) filesByTypeMap[type] = { count: 0, bytes: 0 };\n                filesByTypeMap[type].count++;\n                filesByTypeMap[type].bytes += obj.size || 0;\n              });\n              \n              continuationToken = objects.nextToken;\n              hasMore = objects.isTruncated && !!continuationToken;\n              \n              // Safety limit to prevent infinite loops\n              if (s3ObjectCount > 50000) {\n                console.warn(`S3 analytics: Hit safety limit of 50k objects for user ${userId}`);\n                isPartial = true;\n                break;\n              }\n            }\n            \n            if (isPartial) break;\n          }\n        } catch (s3Error) {\n          console.warn(\"Error fetching S3 external stats:\", s3Error);\n          isPartial = true;\n        }\n      }\n\n      // Storage capacity calculation (1TB mock + actual S3 usage)\n      const baseCapacity = 1024 * 1024 * 1024 * 1024; // 1TB\n      const totalUsed = totalSize + s3TotalSize;\n      const totalCapacity = baseCapacity;\n      const usagePercentage = (totalUsed / totalCapacity) * 100;\n\n      // Generate usage history over time (last 30 days) \n      const usageHistory = [];\n      \n      // Create daily data points for the last 30 days\n      for (let i = 29; i >= 0; i--) {\n        const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\n        const dayStart = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        const dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);\n        \n        // Calculate cumulative storage used up to this day\n        const filesUpToDate = files.filter(file => \n          file.uploadedAt && new Date(file.uploadedAt) <= dayEnd\n        );\n        const cumulativeSize = filesUpToDate.reduce((sum, file) => sum + file.size, 0);\n        const cumulativeCount = filesUpToDate.length;\n        \n        usageHistory.push({\n          date: dayStart.toISOString().split('T')[0], // YYYY-MM-DD format\n          timestamp: dayStart.getTime(),\n          usedBytes: cumulativeSize,\n          fileCount: cumulativeCount,\n          usagePercent: (cumulativeSize / totalCapacity) * 100\n        });\n      }\n      \n      // Generate upload activity over time (last 7 days by hour for more granular view)\n      const uploadActivity = [];\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\n        const dayStart = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        const dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);\n        \n        const uploadsThisDay = files.filter(file => \n          file.uploadedAt && \n          new Date(file.uploadedAt) >= dayStart && \n          new Date(file.uploadedAt) < dayEnd\n        );\n        \n        uploadActivity.push({\n          date: dayStart.toISOString().split('T')[0],\n          uploads: uploadsThisDay.length,\n          bytesUploaded: uploadsThisDay.reduce((sum, file) => sum + file.size, 0)\n        });\n      }\n\n      const analyticsData = {\n        // Capacity metrics\n        capacityBytes: totalCapacity,\n        usedBytes: totalUsed,\n        availableBytes: totalCapacity - totalUsed,\n        usagePct: usagePercentage,\n        \n        // Count metrics\n        counts: {\n          files: files.length + s3ObjectCount,\n          folders: folders.length,\n          shared: sharedFiles + sharedFolders\n        },\n        \n        // Distribution data for charts\n        filesByType: Object.entries(filesByTypeMap).map(([type, data]) => ({\n          type,\n          count: data.count,\n          bytes: data.bytes\n        })),\n        \n        sizeDistribution,\n        \n        bucketUsage: Object.entries(bucketUsageMap).map(([bucket, data]) => ({\n          bucket,\n          count: data.count,\n          bytes: data.bytes\n        })),\n        \n        // Top content\n        topFiles,\n        recentUploads,\n        \n        // Time-series data for charts\n        usageHistory,\n        uploadActivity,\n        \n        // Metadata\n        partial: isPartial,\n        refreshedAt: Date.now(),\n        includeExternal,\n        selectedDisk\n      };\n\n      // Cache the result with compound key\n      analyticsCache.set(cacheKey, { data: analyticsData, timestamp: Date.now() });\n      \n      res.json(analyticsData);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics data\" });\n    }\n  });\n\n  // Server-Sent Events endpoint for real-time analytics updates\n  app.get('/api/analytics/events', isAuthenticated, (req: any, res) => {\n    const userId = req.user.id;\n    \n    // Set headers for SSE\n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    });\n\n    // Add client to user's SSE clients\n    if (!analyticsEventClients.has(userId)) {\n      analyticsEventClients.set(userId, new Set());\n    }\n    analyticsEventClients.get(userId)!.add(res);\n\n    // Send initial ping\n    res.write(`data: ${JSON.stringify({ type: 'connected', timestamp: Date.now() })}\\n\\n`);\n\n    // Send heartbeat every 30 seconds to keep connection alive\n    const heartbeat = setInterval(() => {\n      try {\n        res.write(`:heartbeat\\n\\n`);\n      } catch (error) {\n        clearInterval(heartbeat);\n      }\n    }, 30000);\n\n    // Handle client disconnect and cleanup\n    const cleanup = () => {\n      clearInterval(heartbeat);\n      const userClients = analyticsEventClients.get(userId);\n      if (userClients) {\n        userClients.delete(res);\n        if (userClients.size === 0) {\n          analyticsEventClients.delete(userId);\n        }\n      }\n    };\n\n    req.on('close', cleanup);\n    req.on('error', cleanup);\n  });\n\n  // S3 Connection Management Endpoints\n  \n  // Connect to user's AWS account\n  app.post('/api/s3/connect', isAuthenticated, async (req: any, res) => {\n    try {\n      const { accessKeyId, secretAccessKey, region, sessionToken } = req.body;\n      \n      if (!accessKeyId || !secretAccessKey) {\n        return res.status(400).json({ message: \"Access Key ID and Secret Access Key are required\" });\n      }\n\n      const credentials = {\n        accessKeyId,\n        secretAccessKey,\n        region: region || 'us-east-1',\n        ...(sessionToken && { sessionToken })\n      };\n\n      // Validate credentials by attempting to list buckets\n      const buckets = await s3Service.validateCredentials(credentials);\n      \n      // Store credentials in session\n      const userId = req.user.id;\n      storeS3CredentialsInSession(userId, credentials);\n      \n      res.json({ \n        success: true, \n        message: \"Successfully connected to AWS S3\",\n        buckets \n      });\n    } catch (error: any) {\n      console.error(\"S3 connection error:\", error);\n      res.status(400).json({ \n        message: \"Failed to connect to AWS S3\", \n        error: error.message \n      });\n    }\n  });\n\n  // Disconnect from user's AWS account\n  app.post('/api/s3/disconnect', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      clearS3CredentialsFromSession(userId);\n      res.json({ \n        success: true, \n        message: \"Disconnected from AWS S3\" \n      });\n    } catch (error) {\n      console.error(\"S3 disconnect error:\", error);\n      res.status(500).json({ message: \"Failed to disconnect from AWS S3\" });\n    }\n  });\n\n  // List S3 buckets\n  app.get('/api/s3/buckets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const credentials = getS3CredentialsFromSession(userId);\n      \n      if (!credentials) {\n        return res.status(400).json({ message: \"No AWS credentials found. Please connect first.\" });\n      }\n\n      const buckets = await s3Service.listBuckets(credentials);\n      res.json({ buckets });\n    } catch (error: any) {\n      console.error(\"Error listing buckets:\", error);\n      res.status(500).json({ \n        message: \"Failed to list buckets\", \n        error: error.message \n      });\n    }\n  });\n\n  // List objects in a bucket\n  app.get('/api/s3/objects', isAuthenticated, async (req: any, res) => {\n    try {\n      const { bucket, prefix = '', token } = req.query;\n      const userId = req.user.id;\n      const credentials = getS3CredentialsFromSession(userId);\n      \n      if (!credentials) {\n        return res.status(400).json({ message: \"No AWS credentials found. Please connect first.\" });\n      }\n\n      if (!bucket) {\n        return res.status(400).json({ message: \"Bucket name is required\" });\n      }\n\n      const result = await s3Service.listObjects(\n        bucket as string,\n        prefix as string,\n        credentials,\n        token as string | undefined\n      );\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Error listing objects:\", error);\n      res.status(500).json({ \n        message: \"Failed to list objects\", \n        error: error.message \n      });\n    }\n  });\n\n  // Upload file to S3 bucket\n  app.post('/api/s3/upload', isAuthenticated, uploadLimiter, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const { bucket, prefix = '' } = req.body;\n      const userId = req.user.id;\n      const credentials = getS3CredentialsFromSession(userId);\n      \n      if (!credentials) {\n        return res.status(400).json({ message: \"No AWS credentials found. Please connect first.\" });\n      }\n\n      if (!bucket) {\n        return res.status(400).json({ message: \"Bucket name is required\" });\n      }\n\n      const { buffer, originalname, mimetype } = req.file;\n      \n      // Create the full S3 key with prefix\n      const key = prefix ? `${prefix}/${originalname}` : originalname;\n      \n      const uploadResult = await s3Service.uploadToS3(\n        buffer,\n        bucket,\n        key,\n        mimetype,\n        credentials\n      );\n\n      // Invalidate analytics cache and broadcast update for S3 uploads\n      invalidateAnalyticsCache(userId);\n\n      res.json({\n        success: true,\n        message: \"File uploaded successfully\",\n        result: uploadResult\n      });\n    } catch (error: any) {\n      console.error(\"S3 upload error:\", error);\n      res.status(500).json({ \n        message: \"Failed to upload file\", \n        error: error.message \n      });\n    }\n  });\n\n  // Get presigned download URL for S3 object\n  app.get('/api/s3/download', isAuthenticated, async (req: any, res) => {\n    try {\n      const { bucket, key } = req.query;\n      const userId = req.user.id;\n      const credentials = getS3CredentialsFromSession(userId);\n      \n      if (!credentials) {\n        return res.status(400).json({ message: \"No AWS credentials found. Please connect first.\" });\n      }\n\n      if (!bucket || !key) {\n        return res.status(400).json({ message: \"Bucket name and key are required\" });\n      }\n\n      const downloadUrl = await s3Service.getPresignedDownloadUrl(\n        bucket as string,\n        key as string,\n        credentials\n      );\n      \n      res.json({ downloadUrl });\n    } catch (error: any) {\n      console.error(\"Error generating download URL:\", error);\n      res.status(500).json({ \n        message: \"Failed to generate download URL\", \n        error: error.message \n      });\n    }\n  });\n\n  // Delete S3 objects\n  app.delete('/api/s3/objects', isAuthenticated, fileOpLimiter, async (req: any, res) => {\n    try {\n      const { bucket, keys } = req.body;\n      const userId = req.user.id;\n      const credentials = getS3CredentialsFromSession(userId);\n      \n      if (!credentials) {\n        return res.status(400).json({ message: \"No AWS credentials found. Please connect first.\" });\n      }\n\n      if (!bucket || !keys || !Array.isArray(keys) || keys.length === 0) {\n        return res.status(400).json({ message: \"Bucket name and array of keys are required\" });\n      }\n\n      // Delete objects from S3\n      const deleteResults = await s3Service.deleteS3Objects(bucket, keys, credentials);\n      \n      // Invalidate analytics cache and broadcast update for S3 deletions\n      invalidateAnalyticsCache(userId);\n      \n      res.json({ \n        success: true, \n        message: `Successfully deleted ${deleteResults.deleted.length} object(s)`,\n        deleted: deleteResults.deleted,\n        errors: deleteResults.errors\n      });\n    } catch (error: any) {\n      console.error(\"Error deleting S3 objects:\", error);\n      res.status(500).json({ \n        message: \"Failed to delete objects\", \n        error: error.message \n      });\n    }\n  });\n\n  // Check S3 connection status\n  app.get('/api/s3/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const isConnected = hasS3CredentialsInSession(userId);\n      const credentials = getS3CredentialsFromSession(userId);\n      \n      res.json({ \n        connected: isConnected,\n        region: credentials?.region || null\n      });\n    } catch (error) {\n      console.error(\"Error checking S3 status:\", error);\n      res.status(500).json({ message: \"Failed to check S3 status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":38874},"server/storage.ts":{"content":"import {\n  users,\n  files,\n  folders,\n  type User,\n  type UpsertUser,\n  type File,\n  type InsertFile,\n  type Folder,\n  type InsertFolder,\n} from \"@shared/schema\";\nimport { db } from \"./db-docker\";\nimport { eq, desc, and, isNull } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserEmail(id: string, email: string): Promise<void>;\n  updateUserPassword(id: string, password: string): Promise<void>;\n  \n  // File operations\n  createFile(file: InsertFile): Promise<File>;\n  getFilesByUserId(userId: string, folderId?: number): Promise<File[]>;\n  getFileById(id: number): Promise<File | undefined>;\n  updateFileSharing(id: number, isShared: boolean, shareToken?: string): Promise<File | undefined>;\n  deleteFile(id: number): Promise<void>;\n  getSharedFile(shareToken: string): Promise<File | undefined>;\n  \n  // Folder operations\n  createFolder(folder: InsertFolder): Promise<Folder>;\n  getFoldersByUserId(userId: string, parentId?: number): Promise<Folder[]>;\n  getFolderById(id: number): Promise<Folder | undefined>;\n  updateFolderSharing(id: number, isShared: boolean, shareToken?: string): Promise<Folder | undefined>;\n  deleteFolder(id: number): Promise<void>;\n  getSharedFolder(shareToken: string): Promise<Folder | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserEmail(id: string, email: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        email,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id));\n  }\n\n  async updateUserPassword(id: string, password: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        password,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id));\n  }\n\n  // File operations\n  async createFile(file: InsertFile): Promise<File> {\n    const [newFile] = await db\n      .insert(files)\n      .values(file)\n      .returning();\n    return newFile;\n  }\n\n  async getFilesByUserId(userId: string, folderId?: number): Promise<File[]> {\n    const condition = folderId \n      ? and(eq(files.userId, userId), eq(files.folderId, folderId))\n      : and(eq(files.userId, userId), isNull(files.folderId));\n      \n    return await db\n      .select()\n      .from(files)\n      .where(condition)\n      .orderBy(desc(files.uploadedAt));\n  }\n\n  async getFileById(id: number): Promise<File | undefined> {\n    const [file] = await db\n      .select()\n      .from(files)\n      .where(eq(files.id, id));\n    return file;\n  }\n\n  async updateFileSharing(id: number, isShared: boolean, shareToken?: string): Promise<File | undefined> {\n    const [file] = await db\n      .update(files)\n      .set({\n        isShared,\n        shareToken,\n        updatedAt: new Date(),\n      })\n      .where(eq(files.id, id))\n      .returning();\n    return file;\n  }\n\n  async deleteFile(id: number): Promise<void> {\n    await db.delete(files).where(eq(files.id, id));\n  }\n\n  async getSharedFile(shareToken: string): Promise<File | undefined> {\n    const [file] = await db\n      .select()\n      .from(files)\n      .where(eq(files.shareToken, shareToken));\n    return file;\n  }\n\n  // Folder operations\n  async createFolder(folder: InsertFolder): Promise<Folder> {\n    const result = await db\n      .insert(folders)\n      .values(folder)\n      .returning();\n    return result[0];\n  }\n\n  async getFoldersByUserId(userId: string, parentId?: number): Promise<Folder[]> {\n    const condition = parentId \n      ? and(eq(folders.userId, userId), eq(folders.parentId, parentId))\n      : and(eq(folders.userId, userId), isNull(folders.parentId));\n      \n    return await db\n      .select()\n      .from(folders)\n      .where(condition)\n      .orderBy(desc(folders.createdAt));\n  }\n\n  async getFolderById(id: number): Promise<Folder | undefined> {\n    const [folder] = await db\n      .select()\n      .from(folders)\n      .where(eq(folders.id, id));\n    return folder;\n  }\n\n  async updateFolderSharing(id: number, isShared: boolean, shareToken?: string): Promise<Folder | undefined> {\n    const [folder] = await db\n      .update(folders)\n      .set({\n        isShared,\n        shareToken,\n        updatedAt: new Date(),\n      })\n      .where(eq(folders.id, id))\n      .returning();\n    return folder;\n  }\n\n  async deleteFolder(id: number): Promise<void> {\n    await db.delete(folders).where(eq(folders.id, id));\n  }\n\n  async getSharedFolder(shareToken: string): Promise<Folder | undefined> {\n    const [folder] = await db\n      .select()\n      .from(folders)\n      .where(eq(folders.shareToken, shareToken));\n    return folder;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":5744},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  bigint,\n  boolean,\n  integer,\n  type AnyPgColumn,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - Updated for email/password authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const folders = pgTable(\"folders\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  parentId: integer(\"parent_id\").references((): AnyPgColumn => folders.id, { onDelete: \"set null\" }),\n  isShared: boolean(\"is_shared\").default(false),\n  shareToken: varchar(\"share_token\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const files = pgTable(\"files\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  folderId: integer(\"folder_id\").references(() => folders.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull(),\n  originalName: varchar(\"original_name\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  size: bigint(\"size\", { mode: \"number\" }).notNull(),\n  s3Key: varchar(\"s3_key\").notNull(),\n  s3Bucket: varchar(\"s3_bucket\").notNull(),\n  isShared: boolean(\"is_shared\").default(false),\n  shareToken: varchar(\"share_token\"),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertFileSchema = createInsertSchema(files).omit({\n  id: true,\n  uploadedAt: true,\n  updatedAt: true,\n});\n\nexport const insertFolderSchema = createInsertSchema(folders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const shareFileSchema = z.object({\n  isShared: z.boolean(),\n});\n\nexport const shareFolderSchema = z.object({\n  isShared: z.boolean(),\n});\n\n// Authentication schemas\nexport const signupSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters long\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertFile = z.infer<typeof insertFileSchema>;\nexport type File = typeof files.$inferSelect;\nexport type InsertFolder = z.infer<typeof insertFolderSchema>;\nexport type Folder = typeof folders.$inferSelect;\n","size_bytes":3400},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { NavigationProvider } from \"@/hooks/useNavigation\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Dashboard from \"@/pages/enhanced-dashboard\";\nimport MyFiles from \"@/pages/my-files\";\nimport Shared from \"@/pages/shared\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\nimport EditProfile from \"@/pages/edit-profile\";\nimport ChangePassword from \"@/pages/change-password\";\nimport ChangeEmail from \"@/pages/change-email\";\nimport Help from \"@/pages/help\";\nimport About from \"@/pages/about\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <div className=\"w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      \n      {/* Protected and public routes based on auth status */}\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/files\" component={MyFiles} />\n          <Route path=\"/shared\" component={Shared} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/settings/edit-profile\" component={EditProfile} />\n          <Route path=\"/settings/change-password\" component={ChangePassword} />\n          <Route path=\"/settings/change-email\" component={ChangeEmail} />\n          <Route path=\"/settings/help\" component={Help} />\n          <Route path=\"/settings/about\" component={About} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <NavigationProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </NavigationProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2900},"client/src/index.css":{"content":"/* Modern, professional, 3D-inspired enhancements */\nbody {\n  background: linear-gradient(135deg, #00ffff 0%, #00ced1 100%);\n  min-height: 100vh;\n}\n\n.glass-card {\n  background: rgba(255, 255, 255, 0.7);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.18);\n  backdrop-filter: blur(8px) saturate(180%);\n  border-radius: 1.25rem;\n  border: 1px solid rgba(255, 255, 255, 0.25);\n  transition: box-shadow 0.3s cubic-bezier(.4,2,.3,1), transform 0.2s;\n}\n.glass-card:hover {\n  box-shadow: 0 16px 40px 0 rgba(31, 38, 135, 0.22);\n  transform: translateY(-4px) scale(1.02);\n}\n\n.modern-btn {\n  background: linear-gradient(90deg, #6366f1 0%, #60a5fa 100%);\n  color: #fff;\n  border: none;\n  border-radius: 0.75rem;\n  box-shadow: 0 2px 8px rgba(99,102,241,0.15);\n  padding: 0.75rem 2rem;\n  font-weight: 600;\n  letter-spacing: 0.03em;\n  transition: background 0.2s, transform 0.15s, box-shadow 0.2s;\n  cursor: pointer;\n  perspective: 400px;\n}\n.modern-btn:hover {\n  background: linear-gradient(90deg, #60a5fa 0%, #6366f1 100%);\n  transform: translateY(-2px) scale(1.04) rotateX(6deg);\n  box-shadow: 0 6px 24px rgba(99,102,241,0.22);\n}\n\n.modern-input {\n  background: rgba(255,255,255,0.85);\n  border: 1.5px solid #e0e7ff;\n  border-radius: 0.75rem;\n  padding: 0.75rem 1.25rem;\n  font-size: 1rem;\n  box-shadow: 0 1px 4px rgba(99,102,241,0.07);\n  transition: border 0.2s, box-shadow 0.2s;\n}\n.modern-input:focus {\n  border: 1.5px solid #6366f1;\n  box-shadow: 0 2px 12px rgba(99,102,241,0.13);\n  outline: none;\n}\n\n.modern-shadow {\n  box-shadow: 0 4px 24px 0 rgba(99,102,241,0.13);\n}\n\n.modern-3d {\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.18), 0 1.5px 0 #fff inset;\n  border-radius: 1.25rem;\n  background: linear-gradient(120deg, #f0f4ff 60%, #e0e7ff 100%);\n}\n\n/* Animated gradient border for 3D effect */\n.animated-border {\n  border: 3px solid;\n  border-image: linear-gradient(120deg, #6366f1, #60a5fa, #a5b4fc) 1;\n  animation: borderMove 2.5s linear infinite;\n}\n@keyframes borderMove {\n  0% { border-image-source: linear-gradient(120deg, #6366f1, #60a5fa, #a5b4fc); }\n  100% { border-image-source: linear-gradient(240deg, #6366f1, #60a5fa, #a5b4fc); }\n}\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom CSS variables for consistent colors */\n:root {\n  --aqua-color: #00ffff;\n  --darkturquoise-color: #00ced1;\n}\n\n.bg-aqua {\n  background-color: var(--aqua-color);\n}\n\n.bg-darkturquoise {\n  background-color: var(--darkturquoise-color);\n}\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 20 14.3% 4.1%;\n  --muted: 60 4.8% 95.9%;\n  --muted-foreground: 25 5.3% 44.7%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 20 14.3% 4.1%;\n  --card: 0 0% 100%;\n  --card-foreground: 20 14.3% 4.1%;\n  --border: 20 5.9% 90%;\n  --input: 20 5.9% 90%;\n  --primary: 220 90% 56%;\n  --primary-foreground: 220 100% 98%;\n  --secondary: 60 4.8% 95.9%;\n  --secondary-foreground: 24 9.8% 10%;\n  --accent: 60 4.8% 95.9%;\n  --accent-foreground: 24 9.8% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --ring: 20 14.3% 4.1%;\n  --radius: 0.5rem;\n  --chart-1: 220 90% 56%;\n  --chart-2: 160 60% 45%;\n  --chart-3: 30 80% 55%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 340 75% 55%;\n}\n\n.dark {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 98%;\n  --muted: 240 3.7% 15.9%;\n  --muted-foreground: 240 5% 64.9%;\n  --popover: 240 10% 3.9%;\n  --popover-foreground: 0 0% 98%;\n  --card: 240 10% 3.9%;\n  --card-foreground: 0 0% 98%;\n  --border: 240 3.7% 15.9%;\n  --input: 240 3.7% 15.9%;\n  --primary: 220 90% 56%;\n  --primary-foreground: 220 100% 98%;\n  --secondary: 240 3.7% 15.9%;\n  --secondary-foreground: 0 0% 98%;\n  --accent: 240 3.7% 15.9%;\n  --accent-foreground: 0 0% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --ring: 240 4.9% 83.9%;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n}\n\n@layer components {\n  .file-hover {\n    @apply transition-all duration-200 ease-in-out;\n  }\n  \n  .file-hover:hover {\n    @apply transform -translate-y-0.5 shadow-md;\n  }\n  \n  .upload-zone-active {\n    @apply border-primary bg-blue-50;\n  }\n  \n  .progress-bar {\n    @apply transition-all duration-300 ease-in-out;\n  }\n}\n","size_bytes":4417},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/s3Service.ts":{"content":"import { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand, DeleteObjectsCommand, HeadObjectCommand, ListBucketsCommand, ListObjectsV2Command } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { nanoid } from \"nanoid\";\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_REGION || \"us-east-1\",\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID || \"\",\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || \"\",\n  },\n});\n\nconst BUCKET_NAME = process.env.AWS_S3_BUCKET_NAME || \"ai-storage-solution\";\n\nexport interface UploadResult {\n  key: string;\n  bucket: string;\n  location: string;\n}\n\nexport interface S3Credentials {\n  accessKeyId: string;\n  secretAccessKey: string;\n  region?: string;\n  sessionToken?: string;\n}\n\nexport interface S3Bucket {\n  name: string;\n  creationDate?: Date;\n}\n\nexport interface S3Object {\n  key: string;\n  lastModified?: Date;\n  size?: number;\n  storageClass?: string;\n}\n\nexport interface S3ListResult {\n  objects: S3Object[];\n  prefixes: string[];\n  nextToken?: string;\n  isTruncated: boolean;\n}\n\nexport class S3Service {\n  \n  // Create S3 client with per-user credentials or fallback to default\n  private createS3Client(credentials?: S3Credentials, region?: string): S3Client {\n    if (credentials) {\n      return new S3Client({\n        region: region || \"us-east-1\", // Use provided region or default\n        credentials: {\n          accessKeyId: credentials.accessKeyId,\n          secretAccessKey: credentials.secretAccessKey,\n          ...(credentials.sessionToken && { sessionToken: credentials.sessionToken })\n        },\n        // Enable region-agnostic requests\n        forcePathStyle: false,\n        useGlobalEndpoint: false\n      });\n    }\n    return s3Client; // fallback to default client\n  }\n  \n  // Validate AWS credentials by attempting to list buckets\n  async validateCredentials(credentials: S3Credentials): Promise<S3Bucket[]> {\n    const client = this.createS3Client(credentials);\n    const command = new ListBucketsCommand({});\n    \n    try {\n      const response = await client.send(command);\n      return response.Buckets?.map(bucket => ({\n        name: bucket.Name || '',\n        creationDate: bucket.CreationDate\n      })) || [];\n    } catch (error: any) {\n      throw new Error(`Invalid AWS credentials: ${error.message}`);\n    }\n  }\n  \n  // List S3 buckets\n  async listBuckets(credentials?: S3Credentials): Promise<S3Bucket[]> {\n    const client = this.createS3Client(credentials);\n    const command = new ListBucketsCommand({});\n    \n    const response = await client.send(command);\n    return response.Buckets?.map(bucket => ({\n      name: bucket.Name || '',\n      creationDate: bucket.CreationDate\n    })) || [];\n  }\n  \n  // List objects in a bucket with optional prefix\n  async listObjects(\n    bucketName: string,\n    prefix: string = '',\n    credentials?: S3Credentials,\n    continuationToken?: string,\n    maxKeys: number = 1000\n  ): Promise<S3ListResult> {\n    let client = this.createS3Client(credentials);\n    const command = new ListObjectsV2Command({\n      Bucket: bucketName,\n      Prefix: prefix,\n      Delimiter: '/',\n      MaxKeys: maxKeys,\n      ContinuationToken: continuationToken,\n    });\n    \n    try {\n      const response = await client.send(command);\n      \n      return {\n        objects: response.Contents?.map(obj => ({\n          key: obj.Key || '',\n          lastModified: obj.LastModified,\n          size: obj.Size,\n          storageClass: obj.StorageClass\n        })) || [],\n        prefixes: response.CommonPrefixes?.map(prefix => prefix.Prefix || '') || [],\n        nextToken: response.NextContinuationToken,\n        isTruncated: response.IsTruncated || false\n      };\n    } catch (error: any) {\n      // Handle region redirect errors\n      if (error.Code === 'PermanentRedirect' && error.Endpoint) {\n        // Extract region from endpoint (e.g., bucket.s3-us-west-2.amazonaws.com)\n        const regionMatch = error.Endpoint.match(/s3-([a-z0-9-]+)\\.amazonaws\\.com/);\n        if (regionMatch && regionMatch[1]) {\n          const correctRegion = regionMatch[1];\n          console.log(`Retrying with correct region: ${correctRegion} for bucket: ${bucketName}`);\n          \n          // Create new client with correct region\n          client = this.createS3Client(credentials, correctRegion);\n          const retryResponse = await client.send(command);\n          \n          return {\n            objects: retryResponse.Contents?.map(obj => ({\n              key: obj.Key || '',\n              lastModified: obj.LastModified,\n              size: obj.Size,\n              storageClass: obj.StorageClass\n            })) || [],\n            prefixes: retryResponse.CommonPrefixes?.map(prefix => prefix.Prefix || '') || [],\n            nextToken: retryResponse.NextContinuationToken,\n            isTruncated: retryResponse.IsTruncated || false\n          };\n        }\n      }\n      throw error;\n    }\n  }\n  \n  // Upload file to specific S3 bucket and path\n  async uploadToS3(\n    buffer: Buffer,\n    bucketName: string,\n    key: string,\n    mimeType: string,\n    credentials?: S3Credentials\n  ): Promise<UploadResult> {\n    const client = this.createS3Client(credentials);\n    \n    const command = new PutObjectCommand({\n      Bucket: bucketName,\n      Key: key,\n      Body: buffer,\n      ContentType: mimeType,\n    });\n\n    await client.send(command);\n\n    return {\n      key,\n      bucket: bucketName,\n      location: `https://${bucketName}.s3.amazonaws.com/${key}`,\n    };\n  }\n  \n  // Get presigned URL for downloading from any bucket\n  async getPresignedDownloadUrl(\n    bucketName: string,\n    key: string,\n    credentials?: S3Credentials,\n    expiresIn: number = 3600\n  ): Promise<string> {\n    const client = this.createS3Client(credentials);\n    const command = new GetObjectCommand({\n      Bucket: bucketName,\n      Key: key,\n      ResponseContentDisposition: 'attachment'\n    });\n\n    return await getSignedUrl(client, command, { expiresIn });\n  }\n  \n  // Delete object from any bucket\n  async deleteS3Object(\n    bucketName: string,\n    key: string,\n    credentials?: S3Credentials\n  ): Promise<void> {\n    const client = this.createS3Client(credentials);\n    const command = new DeleteObjectCommand({\n      Bucket: bucketName,\n      Key: key,\n    });\n\n    await client.send(command);\n  }\n\n  // Delete multiple objects from any bucket\n  async deleteS3Objects(\n    bucketName: string,\n    keys: string[],\n    credentials?: S3Credentials\n  ): Promise<{ deleted: string[], errors: any[] }> {\n    const client = this.createS3Client(credentials);\n    \n    // S3 DeleteObjectsCommand can handle up to 1000 objects at once\n    const maxBatchSize = 1000;\n    const deleted: string[] = [];\n    const errors: any[] = [];\n    \n    // Process in batches\n    for (let i = 0; i < keys.length; i += maxBatchSize) {\n      const batch = keys.slice(i, i + maxBatchSize);\n      \n      const command = new DeleteObjectsCommand({\n        Bucket: bucketName,\n        Delete: {\n          Objects: batch.map(key => ({ Key: key })),\n          Quiet: false, // Return info about deleted objects\n        },\n      });\n\n      try {\n        const response = await client.send(command);\n        \n        // Track successfully deleted objects\n        if (response.Deleted) {\n          response.Deleted.forEach(obj => {\n            if (obj.Key) deleted.push(obj.Key);\n          });\n        }\n        \n        // Track any errors\n        if (response.Errors) {\n          errors.push(...response.Errors);\n        }\n      } catch (error) {\n        // If entire batch fails, add all keys to errors\n        batch.forEach(key => {\n          errors.push({\n            Key: key,\n            Code: 'BatchError',\n            Message: error instanceof Error ? error.message : 'Unknown error'\n          });\n        });\n      }\n    }\n    \n    return { deleted, errors };\n  }\n\n  // Legacy methods for backward compatibility with existing app-managed files\n  async uploadFile(\n    buffer: Buffer,\n    fileName: string,\n    mimeType: string,\n    userId: string\n  ): Promise<UploadResult> {\n    const key = `users/${userId}/${nanoid()}-${fileName}`;\n    \n    const command = new PutObjectCommand({\n      Bucket: BUCKET_NAME,\n      Key: key,\n      Body: buffer,\n      ContentType: mimeType,\n      Metadata: {\n        userId,\n        originalName: fileName,\n      },\n    });\n\n    await s3Client.send(command);\n\n    return {\n      key,\n      bucket: BUCKET_NAME,\n      location: `https://${BUCKET_NAME}.s3.amazonaws.com/${key}`,\n    };\n  }\n\n  async getFileUrl(key: string, expiresIn: number = 3600): Promise<string> {\n    const command = new GetObjectCommand({\n      Bucket: BUCKET_NAME,\n      Key: key,\n    });\n\n    return await getSignedUrl(s3Client, command, { expiresIn });\n  }\n\n  async deleteFile(key: string): Promise<void> {\n    const command = new DeleteObjectCommand({\n      Bucket: BUCKET_NAME,\n      Key: key,\n    });\n\n    await s3Client.send(command);\n  }\n\n  async getFileMetadata(key: string) {\n    const command = new HeadObjectCommand({\n      Bucket: BUCKET_NAME,\n      Key: key,\n    });\n\n    try {\n      const response = await s3Client.send(command);\n      return {\n        size: response.ContentLength || 0,\n        lastModified: response.LastModified,\n        contentType: response.ContentType,\n        metadata: response.Metadata,\n      };\n    } catch (error) {\n      throw new Error(`File not found: ${key}`);\n    }\n  }\n\n  async generateShareUrl(key: string, expiresIn: number = 86400): Promise<string> {\n    const command = new GetObjectCommand({\n      Bucket: BUCKET_NAME,\n      Key: key,\n    });\n\n    return await getSignedUrl(s3Client, command, { expiresIn });\n  }\n}\n\nexport const s3Service = new S3Service();\n","size_bytes":9749},"server/services/sessionCredentials.ts":{"content":"import type { S3Credentials } from \"./s3Service\";\n\nexport interface SessionUser {\n  claims?: any;\n  access_token?: string;\n  refresh_token?: string;\n  expires_at?: number;\n  s3Credentials?: S3Credentials;\n}\n\ninterface CredentialEntry {\n  credentials: S3Credentials;\n  expiresAt: number;\n}\n\n/**\n * In-memory credential store with TTL support\n * Persists across requests and provides automatic cleanup\n */\nclass CredentialStore {\n  private credentialMap = new Map<string, CredentialEntry>();\n  private cleanupInterval: NodeJS.Timeout;\n  private readonly DEFAULT_TTL = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n  constructor() {\n    // Run cleanup every hour\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, 60 * 60 * 1000);\n  }\n\n  /**\n   * Store credentials for a user with TTL\n   */\n  set(userId: string, credentials: S3Credentials, ttlMs?: number): void {\n    const ttl = ttlMs || this.DEFAULT_TTL;\n    const expiresAt = Date.now() + ttl;\n    \n    const entry: CredentialEntry = {\n      credentials: {\n        accessKeyId: credentials.accessKeyId,\n        secretAccessKey: credentials.secretAccessKey,\n        region: credentials.region || 'us-east-1',\n        ...(credentials.sessionToken && { sessionToken: credentials.sessionToken })\n      },\n      expiresAt\n    };\n    \n    this.credentialMap.set(userId, entry);\n  }\n\n  /**\n   * Retrieve credentials for a user\n   * Returns undefined if not found or expired\n   */\n  get(userId: string): S3Credentials | undefined {\n    const entry = this.credentialMap.get(userId);\n    \n    if (!entry) {\n      return undefined;\n    }\n    \n    // Check if expired\n    if (Date.now() > entry.expiresAt) {\n      this.credentialMap.delete(userId);\n      return undefined;\n    }\n    \n    return entry.credentials;\n  }\n\n  /**\n   * Remove credentials for a user\n   */\n  delete(userId: string): boolean {\n    return this.credentialMap.delete(userId);\n  }\n\n  /**\n   * Check if user has valid credentials\n   */\n  has(userId: string): boolean {\n    const credentials = this.get(userId);\n    return !!(credentials?.accessKeyId && credentials?.secretAccessKey);\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n    \n    for (const [userId, entry] of Array.from(this.credentialMap.entries())) {\n      if (now > entry.expiresAt) {\n        expiredKeys.push(userId);\n      }\n    }\n    \n    expiredKeys.forEach(key => this.credentialMap.delete(key));\n    \n    if (expiredKeys.length > 0) {\n      console.log(`Cleaned up ${expiredKeys.length} expired S3 credential entries`);\n    }\n  }\n\n  /**\n   * Get store statistics for monitoring\n   */\n  getStats() {\n    return {\n      totalEntries: this.credentialMap.size,\n      defaultTtlHours: this.DEFAULT_TTL / (60 * 60 * 1000)\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.credentialMap.clear();\n  }\n}\n\n// Global credential store instance\nconst credentialStore = new CredentialStore();\n\n/**\n * Store AWS S3 credentials for a user\n * Credentials are stored in-memory with TTL and automatic cleanup\n */\nexport function storeS3CredentialsInSession(\n  userId: string,\n  credentials: S3Credentials,\n  ttlMs?: number\n): void {\n  credentialStore.set(userId, credentials, ttlMs);\n}\n\n/**\n * Retrieve AWS S3 credentials for a user\n * Returns undefined if no credentials are stored or expired\n */\nexport function getS3CredentialsFromSession(\n  userId: string\n): S3Credentials | undefined {\n  return credentialStore.get(userId);\n}\n\n/**\n * Remove AWS S3 credentials for a user\n */\nexport function clearS3CredentialsFromSession(\n  userId: string\n): void {\n  credentialStore.delete(userId);\n}\n\n/**\n * Check if user has AWS S3 credentials stored\n */\nexport function hasS3CredentialsInSession(\n  userId: string\n): boolean {\n  return credentialStore.has(userId);\n}\n\n/**\n * Get credential store statistics (for monitoring/debugging)\n */\nexport function getCredentialStoreStats() {\n  return credentialStore.getStats();\n}\n\n// Handle process cleanup\nprocess.on('SIGTERM', () => {\n  credentialStore.destroy();\n});\n\nprocess.on('SIGINT', () => {\n  credentialStore.destroy();\n});","size_bytes":4255},"client/src/components/breadcrumb.tsx":{"content":"import { ChevronRight, Home, Folder, Database } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useNavigation } from \"@/hooks/useNavigation\";\n\nexport default function Breadcrumb() {\n  const { currentLocation, navigateTo, navigateToRoot } = useNavigation();\n\n  const handleBreadcrumbClick = (index: number) => {\n    if (index === 0) {\n      navigateToRoot();\n      return;\n    }\n\n    const targetPath = currentLocation.path.slice(0, index + 1);\n    const target = targetPath[targetPath.length - 1];\n    \n    navigateTo({\n      type: target.type as 'root' | 'folder' | 's3-bucket' | 's3-prefix',\n      id: target.id,\n      name: target.name,\n      bucketName: target.bucketName,\n      prefix: target.prefix,\n      path: targetPath\n    });\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'root':\n        return <Home className=\"h-4 w-4\" />;\n      case 'folder':\n        return <Folder className=\"h-4 w-4\" />;\n      case 's3-bucket':\n        return <Database className=\"h-4 w-4\" />;\n      case 's3-prefix':\n        return <Folder className=\"h-4 w-4\" />;\n      default:\n        return <Folder className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <nav className=\"flex items-center space-x-2 text-sm text-gray-600 mb-4\" data-testid=\"breadcrumb-nav\">\n      {currentLocation.path.map((item, index) => (\n        <div key={`${item.type}-${item.id || 'root'}`} className=\"flex items-center\">\n          {index > 0 && <ChevronRight className=\"h-4 w-4 mx-2 text-gray-400\" />}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleBreadcrumbClick(index)}\n            className={`flex items-center space-x-2 hover:text-gray-900 ${\n              index === currentLocation.path.length - 1 \n                ? 'text-gray-900 font-medium' \n                : 'text-gray-600'\n            }`}\n            data-testid={`breadcrumb-item-${index}`}\n          >\n            {getIcon(item.type)}\n            <span>{item.name}</span>\n          </Button>\n        </div>\n      ))}\n    </nav>\n  );\n}","size_bytes":2068},"client/src/components/file-table.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigation } from \"@/hooks/useNavigation\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport ShareModal from \"./share-modal\";\nimport { \n  Download, \n  Share, \n  Trash2, \n  FileText, \n  FileImage, \n  File as FileIcon,\n  ChevronLeft,\n  ChevronRight,\n  Folder,\n  Database\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface FileData {\n  id: number;\n  name: string;\n  originalName: string;\n  mimeType: string;\n  size: number;\n  isShared: boolean;\n  uploadedAt: string;\n  updatedAt: string;\n}\n\ninterface S3Bucket {\n  name: string;\n  creationDate?: string;\n}\n\ninterface FileTableProps {\n  searchQuery?: string;\n}\n\nexport default function FileTable({ searchQuery = '' }: FileTableProps) {\n  const [selectedFiles, setSelectedFiles] = useState<number[]>([]);\n  const [selectedS3Objects, setSelectedS3Objects] = useState<string[]>([]);\n  const [shareModalOpen, setShareModalOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<FileData | null>(null);\n  const [deleteConfirmation, setDeleteConfirmation] = useState<{\n    type: 'file' | 's3object' | 'bulk';\n    data?: any;\n    message: string;\n  } | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { navigateTo, currentLocation } = useNavigation();\n\n  const { data: fileData, isLoading } = useQuery<{files: FileData[], folders: any[]}>({\n    queryKey: [\"/api/files\", currentLocation.type, currentLocation.id],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (currentLocation.type === 'folder' && currentLocation.id) {\n        params.append('folderId', currentLocation.id.toString());\n      }\n      return fetch(`/api/files?${params}`, { credentials: 'include' }).then(res => res.json());\n    },\n    enabled: currentLocation.type !== 's3-bucket',\n    retry: false,\n  });\n\n  // Query S3 connection status\n  const { data: s3Status } = useQuery<{connected: boolean, region: string}>({\n    queryKey: [\"/api/s3/status\"],\n    retry: false,\n  });\n\n  // Query S3 buckets when connected and at root\n  const { data: s3BucketsData, isLoading: s3BucketsLoading } = useQuery<{buckets: S3Bucket[]}>({\n    queryKey: [\"/api/s3/buckets\"],\n    enabled: !!s3Status?.connected && currentLocation.type === 'root',\n    retry: false,\n  });\n\n  // Query S3 bucket contents when navigated into a bucket or prefix\n  const { data: s3ObjectsData, isLoading: s3ObjectsLoading } = useQuery<{\n    objects: {key: string, lastModified?: string, size?: number}[],\n    prefixes: string[]\n  }>({\n    queryKey: [\"/api/s3/objects\", \n      currentLocation.type === 's3-bucket' ? currentLocation.name : currentLocation.bucketName, \n      currentLocation.prefix || \"\"],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (currentLocation.type === 's3-bucket') {\n        params.append('bucket', currentLocation.name!);\n      } else if (currentLocation.type === 's3-prefix') {\n        params.append('bucket', currentLocation.bucketName!);\n        params.append('prefix', currentLocation.prefix!);\n      }\n      return fetch(`/api/s3/objects?${params}`, { credentials: 'include' }).then(res => res.json());\n    },\n    enabled: (currentLocation.type === 's3-bucket' || currentLocation.type === 's3-prefix') && \n             (!!currentLocation.name || !!currentLocation.bucketName),\n    retry: false,\n  });\n\n  const files = fileData?.files || [];\n  const folders = fileData?.folders || [];\n  const s3Buckets = s3BucketsData?.buckets || [];\n  const s3Objects = s3ObjectsData?.objects || [];\n  const s3Prefixes = s3ObjectsData?.prefixes || [];\n  const isS3Connected = s3Status?.connected || false;\n\n  // Filter items based on search query\n  const filteredFiles = files.filter(file => \n    searchQuery === '' || file.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const filteredFolders = folders.filter(folder => \n    searchQuery === '' || folder.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const filteredS3Buckets = s3Buckets.filter(bucket => \n    searchQuery === '' || bucket.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const filteredS3Objects = s3Objects.filter(obj => \n    searchQuery === '' || obj.key.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const filteredS3Prefixes = s3Prefixes.filter(prefix => \n    searchQuery === '' || prefix.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const downloadMutation = useMutation({\n    mutationFn: async (fileId: number) => {\n      const response = await fetch(`/api/files/${fileId}/download`, {\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      return data.downloadUrl;\n    },\n    onSuccess: (downloadUrl, fileId) => {\n      // Open download URL in new tab\n      window.open(downloadUrl, '_blank');\n      toast({\n        title: \"Download Started\",\n        description: \"Your file download has begun\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Download Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (fileId: number) => {\n      const response = await fetch(`/api/files/${fileId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (_, fileId) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/files'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics'] });\n      toast({\n        title: \"File Deleted\",\n        description: \"File has been successfully deleted\",\n      });\n      // Remove the deleted file from selection\n      setSelectedFiles(prev => prev.filter(id => id !== fileId));\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Delete Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteS3ObjectMutation = useMutation({\n    mutationFn: async ({ bucket, key }: { bucket: string; key: string }) => {\n      const response = await fetch('/api/s3/objects', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ bucket, keys: [key] }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (_, { key }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/s3/objects'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics'] });\n      toast({\n        title: \"S3 Object Deleted\",\n        description: \"S3 object has been successfully deleted\",\n      });\n      // Only remove the deleted key from selection, preserve other selections\n      setSelectedS3Objects(prev => prev.filter(selectedKey => selectedKey !== key));\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Delete Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async () => {\n      const deleteRequests = [];\n      \n      // Create wrapped promises that reject on HTTP errors for files\n      for (const fileId of selectedFiles) {\n        deleteRequests.push(\n          fetch(`/api/files/${fileId}`, {\n            method: 'DELETE',\n            credentials: 'include',\n          }).then(async (response) => {\n            if (!response.ok) {\n              const errorText = await response.text();\n              throw new Error(`File ${fileId}: ${response.status} ${errorText}`);\n            }\n            return { type: 'file', id: fileId, success: true };\n          })\n        );\n      }\n      \n      // For S3 objects, consolidate into a single request\n      if (selectedS3Objects.length > 0) {\n        const bucket = currentLocation.bucketName || currentLocation.name;\n        deleteRequests.push(\n          fetch('/api/s3/objects', {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({ bucket, keys: selectedS3Objects }),\n          }).then(async (response) => {\n            if (!response.ok) {\n              const errorText = await response.text();\n              throw new Error(`S3 objects: ${response.status} ${errorText}`);\n            }\n            const result = await response.json();\n            return { type: 's3objects', keys: selectedS3Objects, success: true, result };\n          })\n        );\n      }\n      \n      const results = await Promise.allSettled(deleteRequests);\n      const successes = results.filter(result => result.status === 'fulfilled');\n      const failures = results.filter(result => result.status === 'rejected');\n      \n      // Get successful items for removal from selection\n      const successfulFiles: number[] = [];\n      const successfulS3Objects: string[] = [];\n      \n      successes.forEach(result => {\n        if (result.status === 'fulfilled') {\n          const item = result.value;\n          if (item.type === 'file' && 'id' in item) {\n            successfulFiles.push(item.id);\n          } else if (item.type === 's3objects' && 'keys' in item) {\n            // For consolidated S3 delete, get successfully deleted keys from the result\n            const deleteResult = item.result;\n            if (deleteResult && deleteResult.deleted) {\n              successfulS3Objects.push(...deleteResult.deleted);\n            } else {\n              // Fallback: assume all were successful if no detailed result\n              successfulS3Objects.push(...item.keys);\n            }\n          }\n        }\n      });\n      \n      // If there are failures, include success info in the error for partial handling\n      if (failures.length > 0) {\n        const errorMessages = failures.map(failure => \n          failure.status === 'rejected' ? failure.reason?.message || 'Unknown error' : ''\n        ).join('; ');\n        const error = new Error(`${failures.length} of ${results.length} items failed: ${errorMessages}`);\n        (error as any).partialSuccess = { successfulFiles, successfulS3Objects, successCount: successes.length, failureCount: failures.length };\n        throw error;\n      }\n      \n      return { successfulFiles, successfulS3Objects, successCount: successes.length, failureCount: 0 };\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/files'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/s3/objects'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics'] });\n      toast({\n        title: \"Items Deleted\",\n        description: `${result.successCount} items have been successfully deleted`,\n      });\n      // Remove only successful deletions from selection\n      setSelectedFiles(prev => prev.filter(id => !result.successfulFiles.includes(id)));\n      setSelectedS3Objects(prev => prev.filter(key => !result.successfulS3Objects.includes(key)));\n    },\n    onError: (error: any) => {\n      // Always invalidate queries even on error to reflect any successful deletions\n      queryClient.invalidateQueries({ queryKey: ['/api/files'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/s3/objects'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics'] });\n      \n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      // Handle partial success case\n      if (error.partialSuccess) {\n        const { successfulFiles, successfulS3Objects, successCount, failureCount } = error.partialSuccess;\n        // Remove successful deletions from selection\n        setSelectedFiles(prev => prev.filter(id => !successfulFiles.includes(id)));\n        setSelectedS3Objects(prev => prev.filter(key => !successfulS3Objects.includes(key)));\n        toast({\n          title: \"Partial Delete Completed\",\n          description: `${successCount} items deleted successfully, ${failureCount} failed. ${error.message}`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Bulk Delete Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) {\n      return <FileImage className=\"h-5 w-5 text-purple-600\" />;\n    } else if (mimeType.includes('pdf')) {\n      return <FileText className=\"h-5 w-5 text-red-600\" />;\n    } else if (mimeType.includes('spreadsheet') || mimeType.includes('excel')) {\n      return <FileText className=\"h-5 w-5 text-green-600\" />;\n    } else {\n      return <FileIcon className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  // Clear selections when navigating or searching to prevent stale selections\n  useEffect(() => {\n    setSelectedFiles([]);\n    setSelectedS3Objects([]);\n  }, [currentLocation.bucketName, currentLocation.name, currentLocation.prefix, searchQuery]);\n\n  const totalSelected = selectedFiles.length + selectedS3Objects.length;\n  const totalAvailable = filteredFiles.length + filteredS3Objects.length;\n  const isSelectAllChecked = totalAvailable > 0 && totalSelected === totalAvailable;\n  const isSelectAllIndeterminate = totalSelected > 0 && totalSelected < totalAvailable;\n\n\n  const handleSelectAll = (checked: boolean | \"indeterminate\") => {\n    const shouldSelect = Boolean(checked);\n    if (shouldSelect) {\n      setSelectedFiles(filteredFiles.map(file => file.id));\n      setSelectedS3Objects(filteredS3Objects.map(obj => obj.key));\n    } else {\n      setSelectedFiles([]);\n      setSelectedS3Objects([]);\n    }\n  };\n\n  const handleSelectFile = (fileId: number, checked: boolean | \"indeterminate\") => {\n    const shouldSelect = Boolean(checked);\n    if (shouldSelect) {\n      setSelectedFiles(prev => [...prev, fileId]);\n    } else {\n      setSelectedFiles(prev => prev.filter(id => id !== fileId));\n    }\n  };\n\n  const handleSelectS3Object = (objectKey: string, checked: boolean | \"indeterminate\") => {\n    const shouldSelect = Boolean(checked);\n    if (shouldSelect) {\n      setSelectedS3Objects(prev => [...prev, objectKey]);\n    } else {\n      setSelectedS3Objects(prev => prev.filter(key => key !== objectKey));\n    }\n  };\n\n  const handleDownload = (fileId: number) => {\n    downloadMutation.mutate(fileId);\n  };\n\n  const handleShare = (file: FileData) => {\n    setSelectedFile(file);\n    setShareModalOpen(true);\n  };\n\n  const handleDelete = (fileId: number) => {\n    setDeleteConfirmation({\n      type: 'file',\n      data: fileId,\n      message: 'Are you sure you want to delete this file? This action cannot be undone.'\n    });\n  };\n\n  const handleDeleteS3Object = (objectKey: string) => {\n    const bucket = currentLocation.bucketName || currentLocation.name;\n    setDeleteConfirmation({\n      type: 's3object',\n      data: { bucket: bucket!, key: objectKey },\n      message: 'Are you sure you want to delete this S3 object? This action cannot be undone.'\n    });\n  };\n\n  const handleBulkDelete = () => {\n    const totalSelected = selectedFiles.length + selectedS3Objects.length;\n    if (totalSelected === 0) {\n      toast({\n        title: \"No items selected\",\n        description: \"Please select items to delete\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setDeleteConfirmation({\n      type: 'bulk',\n      data: null,\n      message: `Are you sure you want to delete ${totalSelected} selected items? This action cannot be undone.`\n    });\n  };\n\n  const handleConfirmDelete = () => {\n    if (!deleteConfirmation) return;\n\n    switch (deleteConfirmation.type) {\n      case 'file':\n        deleteMutation.mutate(deleteConfirmation.data);\n        break;\n      case 's3object':\n        deleteS3ObjectMutation.mutate(deleteConfirmation.data);\n        break;\n      case 'bulk':\n        bulkDeleteMutation.mutate();\n        break;\n    }\n    \n    setDeleteConfirmation(null);\n  };\n\n  if (isLoading || (isS3Connected && s3BucketsLoading) || ((currentLocation.type === 's3-bucket' || currentLocation.type === 's3-prefix') && s3ObjectsLoading)) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (filteredFiles.length === 0 && filteredFolders.length === 0 && filteredS3Buckets.length === 0 && filteredS3Objects.length === 0 && filteredS3Prefixes.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <FileIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n        <p className=\"text-gray-500\">No files, folders, buckets, or objects found</p>\n        <p className=\"text-sm text-gray-400\">Upload files, create folders, or navigate to different locations</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* Bulk actions bar */}\n      {(selectedFiles.length > 0 || selectedS3Objects.length > 0) && (\n        <div className=\"mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-blue-800\">\n              {selectedFiles.length + selectedS3Objects.length} items selected\n            </span>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={handleBulkDelete}\n              disabled={bulkDeleteMutation.isPending}\n              data-testid=\"button-bulk-delete\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Delete Selected\n            </Button>\n          </div>\n        </div>\n      )}\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-12\">\n                <Checkbox\n                  checked={isSelectAllIndeterminate ? 'indeterminate' : isSelectAllChecked}\n                  onCheckedChange={handleSelectAll}\n                  data-testid=\"checkbox-select-all\"\n                />\n              </TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Size</TableHead>\n              <TableHead>Modified</TableHead>\n              <TableHead>Shared</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {/* Render S3 buckets first (when connected) */}\n            {isS3Connected && currentLocation.type === 'root' && filteredS3Buckets.map((bucket) => (\n              <TableRow \n                key={`s3-bucket-${bucket.name}`} \n                className=\"hover:bg-blue-50 cursor-pointer\"\n                onClick={() => {\n                  const newPath = [...currentLocation.path, {\n                    type: 's3-bucket',\n                    name: bucket.name\n                  }];\n                  navigateTo({\n                    type: 's3-bucket',\n                    name: bucket.name,\n                    path: newPath\n                  });\n                }}\n                data-testid={`row-bucket-${bucket.name}`}\n              >\n                <TableCell onClick={(e) => e.stopPropagation()}>\n                  <Checkbox disabled />\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center\">\n                      <Database className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{bucket.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  -\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  {bucket.creationDate ? formatDistanceToNow(new Date(bucket.creationDate), { addSuffix: true }) : '-'}\n                </TableCell>\n                <TableCell>\n                  <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800\">\n                    Disk\n                  </Badge>\n                </TableCell>\n                <TableCell onClick={(e) => e.stopPropagation()}>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const newPath = [...currentLocation.path, {\n                          type: 's3-bucket',\n                          name: bucket.name\n                        }];\n                        navigateTo({\n                          type: 's3-bucket',\n                          name: bucket.name,\n                          path: newPath\n                        });\n                      }}\n                      data-testid={`button-open-bucket-${bucket.name}`}\n                    >\n                      <Folder className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n\n            {/* Render S3 prefixes (folders within buckets) */}\n            {(currentLocation.type === 's3-bucket' || currentLocation.type === 's3-prefix') && filteredS3Prefixes.map((prefix, index) => (\n              <TableRow \n                key={`s3-prefix-${prefix}-${index}`} \n                className=\"hover:bg-blue-50 cursor-pointer\"\n                onClick={() => {\n                  const newPath = [...currentLocation.path, {\n                    type: 's3-prefix',\n                    name: prefix.replace(/\\/$/, ''),\n                    bucketName: currentLocation.bucketName || currentLocation.name,\n                    prefix: prefix\n                  }];\n                  navigateTo({\n                    type: 's3-prefix',\n                    name: prefix.replace(/\\/$/, ''),\n                    bucketName: currentLocation.bucketName || currentLocation.name,\n                    prefix: prefix,\n                    path: newPath\n                  });\n                }}\n                data-testid={`row-s3-folder-${prefix}`}\n              >\n                <TableCell onClick={(e) => e.stopPropagation()}>\n                  <Checkbox disabled />\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center\">\n                      <Folder className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{prefix.replace(/\\/$/, '')}</p>\n                      <p className=\"text-sm text-gray-500\">S3 Folder</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  -\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  -\n                </TableCell>\n                <TableCell>\n                  <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800\">\n                    S3 Folder\n                  </Badge>\n                </TableCell>\n                <TableCell onClick={(e) => e.stopPropagation()}>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const newPath = [...currentLocation.path, {\n                          type: 's3-prefix',\n                          name: prefix.replace(/\\/$/, ''),\n                          bucketName: currentLocation.bucketName || currentLocation.name,\n                          prefix: prefix\n                        }];\n                        navigateTo({\n                          type: 's3-prefix',\n                          name: prefix.replace(/\\/$/, ''),\n                          bucketName: currentLocation.bucketName || currentLocation.name,\n                          prefix: prefix,\n                          path: newPath\n                        });\n                      }}\n                      data-testid={`button-open-s3-folder-${prefix}`}\n                    >\n                      <Folder className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n\n            {/* Render S3 objects (files within buckets) */}\n            {(currentLocation.type === 's3-bucket' || currentLocation.type === 's3-prefix') && filteredS3Objects.map((object, index) => (\n              <TableRow key={`s3-object-${object.key}-${index}`} className=\"hover:bg-gray-50\">\n                <TableCell>\n                  <Checkbox\n                    checked={selectedS3Objects.includes(object.key)}\n                    onCheckedChange={(checked) => handleSelectS3Object(object.key, checked)}\n                    data-testid={`checkbox-s3-object-${object.key}`}\n                  />\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-gray-100 rounded flex items-center justify-center\">\n                      <FileIcon className=\"h-5 w-5 text-gray-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{object.key}</p>\n                      <p className=\"text-sm text-gray-500\">S3 Object</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  {object.size ? `${(object.size / 1024).toFixed(1)} KB` : '-'}\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  {object.lastModified ? formatDistanceToNow(new Date(object.lastModified), { addSuffix: true }) : '-'}\n                </TableCell>\n                <TableCell>\n                  <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-800\">\n                    S3 Object\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        toast({\n                          title: \"S3 Download\",\n                          description: `Download ${object.key} - coming soon!`,\n                        });\n                      }}\n                      data-testid={`button-download-s3-object-${object.key}`}\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteS3Object(object.key)}\n                      disabled={deleteS3ObjectMutation.isPending}\n                      className=\"text-red-600 hover:text-red-700\"\n                      data-testid={`button-delete-s3-object-${object.key}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n            \n            {/* Render folders */}\n            {filteredFolders.map((folder) => (\n              <TableRow \n                key={`folder-${folder.id}`} \n                className=\"hover:bg-gray-50 cursor-pointer\"\n                onClick={() => {\n                  const newPath = [...currentLocation.path, {\n                    type: 'folder',\n                    id: folder.id,\n                    name: folder.name\n                  }];\n                  navigateTo({\n                    type: 'folder',\n                    id: folder.id,\n                    name: folder.name,\n                    path: newPath\n                  });\n                }}\n                data-testid={`row-folder-${folder.id}`}\n              >\n                <TableCell onClick={(e) => e.stopPropagation()}>\n                  <Checkbox disabled />\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center\">\n                      <Folder className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{folder.name}</p>\n                      <p className=\"text-sm text-gray-500\">Folder</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  -\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  {formatDistanceToNow(new Date(folder.createdAt), { addSuffix: true })}\n                </TableCell>\n                <TableCell>\n                  {folder.isShared ? (\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      Shared\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-800\">\n                      Private\n                    </Badge>\n                  )}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        const newPath = [...currentLocation.path, {\n                          type: 'folder',\n                          id: folder.id,\n                          name: folder.name\n                        }];\n                        navigateTo({\n                          type: 'folder',\n                          id: folder.id,\n                          name: folder.name,\n                          path: newPath\n                        });\n                      }}\n                      data-testid={`button-open-folder-${folder.id}`}\n                    >\n                      <Folder className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleShare(folder);\n                      }}\n                    >\n                      <Share className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete(folder.id);\n                      }}\n                      disabled={deleteMutation.isPending}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n            \n            {/* Render files */}\n            {filteredFiles.map((file) => (\n              <TableRow key={`file-${file.id}`} className=\"hover:bg-gray-50\">\n                <TableCell>\n                  <Checkbox\n                    checked={selectedFiles.includes(file.id)}\n                    onCheckedChange={(checked) => handleSelectFile(file.id, checked)}\n                  />\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-gray-100 rounded flex items-center justify-center\">\n                      {getFileIcon(file.mimeType)}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{file.name}</p>\n                      <p className=\"text-sm text-gray-500\">/{file.originalName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  {formatFileSize(file.size)}\n                </TableCell>\n                <TableCell className=\"text-gray-600\">\n                  {formatDistanceToNow(new Date(file.uploadedAt), { addSuffix: true })}\n                </TableCell>\n                <TableCell>\n                  {file.isShared ? (\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      Shared\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-800\">\n                      Private\n                    </Badge>\n                  )}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDownload(file.id)}\n                      disabled={downloadMutation.isPending}\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleShare(file)}\n                    >\n                      <Share className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(file.id)}\n                      disabled={deleteMutation.isPending}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between mt-6\">\n        <p className=\"text-sm text-gray-600\">\n          Showing <span className=\"font-medium\">1</span> to{' '}\n          <span className=\"font-medium\">{Math.min(10, files.length)}</span> of{' '}\n          <span className=\"font-medium\">{files.length}</span> results\n        </p>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" disabled>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-white\">\n            1\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" disabled>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteConfirmation} onOpenChange={() => setDeleteConfirmation(null)}>\n        <AlertDialogContent className=\"max-w-md\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirm Delete</AlertDialogTitle>\n            <AlertDialogDescription>\n              {deleteConfirmation?.message}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <ShareModal\n        isOpen={shareModalOpen}\n        onClose={() => setShareModalOpen(false)}\n        file={selectedFile}\n      />\n    </>\n  );\n}\n","size_bytes":38918},"client/src/components/file-upload.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigation } from \"@/hooks/useNavigation\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CloudUpload, File, X, Folder, Plus } from \"lucide-react\";\n\ninterface UploadFile {\n  file: File;\n  progress: number;\n  status: 'pending' | 'uploading' | 'success' | 'error';\n  error?: string;\n  relativePath?: string; // For folder uploads\n}\n\nexport default function FileUpload() {\n  const [uploadFiles, setUploadFiles] = useState<UploadFile[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { currentLocation } = useNavigation();\n  const [dragActive, setDragActive] = useState(false);\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      let endpoint = '/api/files/upload';\n      \n      // Add context-specific parameters\n      if (currentLocation.type === 'folder' && currentLocation.id) {\n        formData.append('folderId', currentLocation.id.toString());\n      } else if (currentLocation.type === 's3-bucket' && currentLocation.name) {\n        endpoint = '/api/s3/upload';\n        formData.append('bucket', currentLocation.name);\n        formData.append('prefix', '');\n      } else if (currentLocation.type === 's3-prefix' && currentLocation.bucketName) {\n        endpoint = '/api/s3/upload';\n        formData.append('bucket', currentLocation.bucketName);\n        formData.append('prefix', currentLocation.prefix || '');\n      }\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, file) => {\n      setUploadFiles(prev => \n        prev.map(uf => \n          uf.file === file \n            ? { ...uf, status: 'success', progress: 100 }\n            : uf\n        )\n      );\n      // Invalidate relevant queries based on current location\n      if (currentLocation.type === 's3-bucket') {\n        queryClient.invalidateQueries({ queryKey: ['/api/s3/objects', currentLocation.name, \"\"] });\n      } else if (currentLocation.type === 's3-prefix') {\n        queryClient.invalidateQueries({ queryKey: ['/api/s3/objects', currentLocation.bucketName, currentLocation.prefix] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: ['/api/files', currentLocation.type, currentLocation.id] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics'] });\n      toast({\n        title: \"Success\",\n        description: `${file.name} uploaded successfully`,\n      });\n    },\n    onError: (error, file) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      setUploadFiles(prev => \n        prev.map(uf => \n          uf.file === file \n            ? { ...uf, status: 'error', error: error.message }\n            : uf\n        )\n      );\n      toast({\n        title: \"Upload Failed\",\n        description: `Failed to upload ${file.name}: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length === 0) return;\n\n    const newUploadFiles = files.map(file => ({\n      file,\n      progress: 0,\n      status: 'pending' as const,\n      relativePath: file.name,\n    }));\n\n    setUploadFiles(prev => [...prev, ...newUploadFiles]);\n\n    // Start uploading files\n    files.forEach(file => {\n      setUploadFiles(prev => \n        prev.map(uf => \n          uf.file === file \n            ? { ...uf, status: 'uploading', progress: 10 }\n            : uf\n        )\n      );\n      uploadMutation.mutate(file);\n    });\n  }, [uploadMutation]);\n\n  const handleFolderUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length === 0) return;\n\n    const newUploadFiles = files.map(file => ({\n      file,\n      progress: 0,\n      status: 'pending' as const,\n      relativePath: (file as any).webkitRelativePath || file.name,\n    }));\n\n    setUploadFiles(prev => [...prev, ...newUploadFiles]);\n\n    // Start uploading files\n    files.forEach(file => {\n      setUploadFiles(prev => \n        prev.map(uf => \n          uf.file === file \n            ? { ...uf, status: 'uploading', progress: 10 }\n            : uf\n        )\n      );\n      uploadMutation.mutate(file);\n    });\n  }, [uploadMutation]);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const newUploadFiles = acceptedFiles.map(file => ({\n      file,\n      progress: 0,\n      status: 'pending' as const,\n      relativePath: (file as any).webkitRelativePath || file.name,\n    }));\n\n    setUploadFiles(prev => [...prev, ...newUploadFiles]);\n\n    // Start uploading files\n    acceptedFiles.forEach(file => {\n      setUploadFiles(prev => \n        prev.map(uf => \n          uf.file === file \n            ? { ...uf, status: 'uploading', progress: 10 }\n            : uf\n        )\n      );\n      uploadMutation.mutate(file);\n    });\n  }, [uploadMutation]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    multiple: true,\n    maxSize: 100 * 1024 * 1024, // 100MB\n    accept: undefined, // Accept all file types\n    onDragEnter: () => setDragActive(true),\n    onDragLeave: () => setDragActive(false),\n  });\n\n  const removeFile = (fileToRemove: File) => {\n    setUploadFiles(prev => prev.filter(uf => uf.file !== fileToRemove));\n  };\n\n  const clearCompleted = () => {\n    setUploadFiles(prev => prev.filter(uf => uf.status === 'uploading' || uf.status === 'pending'));\n  };\n\n  // Auto-clear completed uploads after a delay\n  useEffect(() => {\n    const hasCompletedUploads = uploadFiles.some(uf => uf.status === 'success' || uf.status === 'error');\n    const hasActiveUploads = uploadFiles.some(uf => uf.status === 'uploading' || uf.status === 'pending');\n\n    if (hasCompletedUploads && !hasActiveUploads) {\n      // All uploads are complete (either success or error), auto-clear after 3 seconds\n      const timer = setTimeout(() => {\n        clearCompleted();\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [uploadFiles]);\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Upload Files</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {currentLocation.type === 'root' ? 'Uploading to: Root directory' :\n             currentLocation.type === 'folder' ? `Uploading to: ${currentLocation.name} folder` :\n             currentLocation.type === 's3-bucket' ? `Uploading to: ${currentLocation.name} S3 bucket` :\n             currentLocation.type === 's3-prefix' ? `Uploading to: ${currentLocation.bucketName}/${currentLocation.prefix}` :\n             'Uploading to current location'}\n          </p>\n        </div>\n        \n        <div \n          {...getRootProps()} \n          className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n            isDragActive || dragActive\n              ? 'border-primary bg-blue-50' \n              : 'border-gray-300 hover:border-primary hover:bg-blue-50'\n          }`}\n        >\n          <input {...getInputProps()} />\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n              <CloudUpload className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div>\n              <p className=\"text-lg font-medium text-gray-900\">\n                {isDragActive || dragActive ? 'Drop files or folders here' : 'Drop files or folders here, or use the buttons below'}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                Support for files and folders. Any file types accepted. Maximum file size: 100MB\n              </p>\n            </div>\n            {!(isDragActive || dragActive) && (\n              <div className=\"flex items-center space-x-4\">\n                {/* Hidden file input for Browse Files */}\n                <input\n                  type=\"file\"\n                  multiple\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                  data-testid=\"input-file-upload\"\n                />\n                <Button \n                  className=\"bg-primary hover:bg-blue-700\" \n                  onClick={() => document.getElementById('file-upload')?.click()}\n                  data-testid=\"button-upload-files\"\n                >\n                  <File className=\"h-4 w-4 mr-2\" />\n                  Browse Files\n                </Button>\n                \n                {/* Hidden folder input for Browse Folders */}\n                <input\n                  type=\"file\"\n                  multiple\n                  {...({ webkitdirectory: \"\", directory: \"\" } as any)}\n                  onChange={handleFolderUpload}\n                  className=\"hidden\"\n                  id=\"folder-upload\"\n                  data-testid=\"input-folder-upload\"\n                />\n                <Button \n                  variant=\"outline\"\n                  onClick={() => document.getElementById('folder-upload')?.click()}\n                  data-testid=\"button-upload-folder\"\n                >\n                  <Folder className=\"h-4 w-4 mr-2\" />\n                  Browse Folders\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Upload Progress */}\n        {uploadFiles.length > 0 && (\n          <div className=\"mt-4 space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-medium text-gray-900\">Upload Progress</h4>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={clearCompleted}\n                className=\"text-xs\"\n              >\n                Clear Completed\n              </Button>\n            </div>\n            \n            {uploadFiles.map((uploadFile, index) => (\n              <div key={index} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex-shrink-0\">\n                  <File className=\"h-5 w-5 text-gray-400\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-900 truncate\">\n                    {uploadFile.file.name}\n                  </p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Progress \n                      value={uploadFile.progress} \n                      className=\"flex-1 h-2\"\n                    />\n                    <span className=\"text-xs text-gray-500 w-12\">\n                      {uploadFile.status === 'success' ? '100%' : \n                       uploadFile.status === 'error' ? 'Error' :\n                       uploadFile.status === 'uploading' ? `${uploadFile.progress}%` : 'Pending'}\n                    </span>\n                  </div>\n                  {uploadFile.error && (\n                    <p className=\"text-xs text-red-600 mt-1\">{uploadFile.error}</p>\n                  )}\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(uploadFile.file)}\n                  className=\"flex-shrink-0\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12567},"client/src/components/share-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Copy, Check } from \"lucide-react\";\n\ninterface FileData {\n  id: number;\n  name: string;\n  isShared: boolean;\n  shareToken?: string;\n}\n\ninterface ShareModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  file: FileData | null;\n}\n\nexport default function ShareModal({ isOpen, onClose, file }: ShareModalProps) {\n  const [isShared, setIsShared] = useState(file?.isShared || false);\n  const [shareUrl, setShareUrl] = useState(\"\");\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const shareMutation = useMutation({\n    mutationFn: async ({ fileId, isShared }: { fileId: number; isShared: boolean }) => {\n      const response = await fetch(`/api/files/${fileId}/share`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isShared }),\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/files'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics'] });\n      setShareUrl(data.shareUrl || \"\");\n      toast({\n        title: \"Success\",\n        description: isShared ? \"File shared successfully\" : \"File sharing disabled\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleShareToggle = async (checked: boolean) => {\n    if (!file) return;\n    \n    setIsShared(checked);\n    shareMutation.mutate({ fileId: file.id, isShared: checked });\n  };\n\n  const copyToClipboard = async () => {\n    if (!shareUrl) return;\n    \n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n      toast({\n        title: \"Copied!\",\n        description: \"Share link copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to copy\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!file) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Share File</DialogTitle>\n          <DialogDescription>\n            Generate a shareable link for this file that others can use to access it.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          <div>\n            <Label className=\"text-base font-medium\">File: {file.name}</Label>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label className=\"text-base\">Enable sharing</Label>\n              <p className=\"text-sm text-gray-500\">\n                Allow others to access this file with a link\n              </p>\n            </div>\n            <Switch\n              checked={isShared}\n              onCheckedChange={handleShareToggle}\n              disabled={shareMutation.isPending}\n            />\n          </div>\n\n          {isShared && shareUrl && (\n            <div className=\"space-y-2\">\n              <Label>Share link</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  value={shareUrl}\n                  readOnly\n                  className=\"flex-1 bg-gray-50\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={copyToClipboard}\n                  className=\"px-3\"\n                >\n                  {copied ? (\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                Anyone with this link can view and download the file\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5350},"client/src/components/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Cloud, \n  Home, \n  Folder, \n  Share, \n  BarChart3, \n  Settings, \n  LogOut,\n  Info \n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Sidebar() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n  \n  // Type assertion to ensure user has the correct type\n  const typedUser = user as User | undefined;\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    const first = firstName?.charAt(0) || \"\";\n    const last = lastName?.charAt(0) || \"\";\n    return (first + last).toUpperCase() || \"U\";\n  };\n\n    return (\n      <aside className=\"w-64 min-h-screen shadow-lg\" style={{ backgroundColor: 'darkturquoise' }}>\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Cloud className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-900\">AI Storage</h1>\n            <p className=\"text-xs text-gray-500\">Cloud Solution</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"mt-6\">\n        {/* User Profile Section */}\n        <div className=\"px-6 mb-4\">\n          <div className=\"flex items-center space-x-3 p-3 rounded-lg bg-primary/10\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={typedUser?.profileImageUrl || \"\"} alt=\"User avatar\" />\n              <AvatarFallback className=\"bg-primary text-white\">\n                {getInitials(typedUser?.firstName, typedUser?.lastName)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"font-medium text-gray-900 truncate\">\n                {typedUser?.firstName && typedUser?.lastName \n                  ? `${typedUser.firstName} ${typedUser.lastName}`\n                  : typedUser?.email || \"User\"\n                }\n              </p>\n              <p className=\"text-sm text-gray-500 truncate\">\n                {typedUser?.email || \"user@example.com\"}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Navigation Links */}\n        <ul className=\"space-y-2 px-6\">\n          <li>\n            <Link href=\"/\" className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n              location === \"/\" ? \"bg-primary text-white\" : \"text-gray-700 hover:bg-gray-100\"\n            }`}>\n              <Home className=\"h-5 w-5\" />\n              <span>Dashboard</span>\n            </Link>\n          </li>\n          <li>\n            <Link href=\"/files\" className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n              location === \"/files\" ? \"bg-primary text-white\" : \"text-gray-700 hover:bg-gray-100\"\n            }`}>\n              <Folder className=\"h-5 w-5\" />\n              <span>My Files</span>\n            </Link>\n          </li>\n          <li>\n            <Link href=\"/shared\" className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n              location === \"/shared\" ? \"bg-primary text-white\" : \"text-gray-700 hover:bg-gray-100\"\n            }`}>\n              <Share className=\"h-5 w-5\" />\n              <span>Shared</span>\n            </Link>\n          </li>\n          <li>\n            <Link href=\"/analytics\" className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n              location === \"/analytics\" ? \"bg-primary text-white\" : \"text-gray-700 hover:bg-gray-100\"\n            }`}>\n              <BarChart3 className=\"h-5 w-5\" />\n              <span>Analytics</span>\n            </Link>\n          </li>\n          <li>\n            <Link href=\"/settings\" className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n              location === \"/settings\" || location.startsWith(\"/settings/\") ? \"bg-primary text-white\" : \"text-gray-700 hover:bg-gray-100\"\n            }`}>\n              <Settings className=\"h-5 w-5\" />\n              <span>Settings</span>\n            </Link>\n          </li>\n          <li>\n            <Link href=\"/settings/about\" className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n              location === \"/settings/about\" ? \"bg-primary text-white\" : \"text-gray-700 hover:bg-gray-100\"\n            }`} data-testid=\"link-about-sidebar\">\n              <Info className=\"h-5 w-5\" />\n              <span>About Us</span>\n            </Link>\n          </li>\n        </ul>\n        \n        {/* Logout Button */}\n        <div className=\"mt-8 px-6\">\n          <Button \n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"w-full flex items-center justify-center space-x-2 p-3\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            <span>Sign Out</span>\n          </Button>\n        </div>\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":5158},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\nexport function useAuth() {\n  const [, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      \n      // Clear all queries and redirect to home\n      queryClient.clear();\n      navigate(\"/\");\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Force clear and redirect even if request fails\n      queryClient.clear();\n      navigate(\"/\");\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    error,\n    isAuthenticated: !!user,\n    isError: !!error,\n    logout,\n  };\n}\n","size_bytes":877},"client/src/hooks/useNavigation.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\nexport interface NavigationLocation {\n  type: 'root' | 'folder' | 's3-bucket' | 's3-prefix';\n  id?: number;\n  name?: string;\n  bucketName?: string;\n  prefix?: string;\n  path: { type: string; id?: number; name: string; bucketName?: string; prefix?: string }[];\n}\n\ninterface NavigationContextType {\n  currentLocation: NavigationLocation;\n  navigateTo: (location: NavigationLocation) => void;\n  navigateBack: () => void;\n  navigateToRoot: () => void;\n  isAtRoot: boolean;\n}\n\nconst NavigationContext = createContext<NavigationContextType | undefined>(undefined);\n\nexport function NavigationProvider({ children }: { children: ReactNode }) {\n  const [currentLocation, setCurrentLocation] = useState<NavigationLocation>({\n    type: 'root',\n    path: [{ type: 'root', name: 'My Files' }]\n  });\n\n  const navigateTo = (location: NavigationLocation) => {\n    setCurrentLocation(location);\n  };\n\n  const navigateBack = () => {\n    if (currentLocation.path.length > 1) {\n      const newPath = [...currentLocation.path];\n      newPath.pop();\n      const parentLocation = newPath[newPath.length - 1];\n      \n      setCurrentLocation({\n        type: parentLocation.type as 'root' | 'folder' | 's3-bucket',\n        id: parentLocation.id,\n        name: parentLocation.name,\n        path: newPath\n      });\n    }\n  };\n\n  const navigateToRoot = () => {\n    setCurrentLocation({\n      type: 'root',\n      path: [{ type: 'root', name: 'My Files' }]\n    });\n  };\n\n  const isAtRoot = currentLocation.type === 'root';\n\n  return (\n    <NavigationContext.Provider value={{\n      currentLocation,\n      navigateTo,\n      navigateBack,\n      navigateToRoot,\n      isAtRoot\n    }}>\n      {children}\n    </NavigationContext.Provider>\n  );\n}\n\nexport function useNavigation() {\n  const context = useContext(NavigationContext);\n  if (context === undefined) {\n    throw new Error('useNavigation must be used within a NavigationProvider');\n  }\n  return context;\n}","size_bytes":2000},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Set specific defaults for critical queries that need fresh data\nqueryClient.setQueryDefaults([\"/api/stats\"], { \n  staleTime: 0, \n  refetchOnMount: \"always\" \n});\nqueryClient.setQueryDefaults([\"/api/files\"], { \n  staleTime: 0, \n  refetchOnMount: \"always\" \n});\nqueryClient.setQueryDefaults([\"/api/s3/buckets\"], { \n  staleTime: 0, \n  refetchOnMount: \"always\" \n});\nqueryClient.setQueryDefaults([\"/api/s3/objects\"], { \n  staleTime: 0, \n  refetchOnMount: \"always\" \n});\nqueryClient.setQueryDefaults([\"/api/analytics\"], { \n  staleTime: 0 \n});\n","size_bytes":1914},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  Cloud, \n  Shield, \n  Zap, \n  Users, \n  Globe, \n  Database,\n  Upload,\n  Share2,\n  BarChart3,\n  Github,\n  Mail,\n  ExternalLink,\n  ArrowLeft\n} from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-cyan-300 via-cyan-400 to-cyan-500\" style={{ backgroundColor: 'aqua' }}>\n      <div className=\"container max-w-6xl mx-auto py-10\">\n        <div className=\"space-y-12\">\n          {/* Back button */}\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-white/80 dark:hover:bg-gray-800/80\" asChild data-testid=\"button-back\">\n              <Link href=\"/settings\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Settings\n              </Link>\n            </Button>\n          </div>\n\n          {/* Enhanced Hero Section */}\n          <div className=\"text-center space-y-6\">\n            <h1 className=\"text-5xl font-bold tracking-tight\" style={{ color: 'navy' }}>\n              About AI Storage Solution\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-4xl mx-auto leading-relaxed\">\n              A modern, secure, and intelligent cloud storage platform built to simplify file management \n              and collaboration for individuals and teams. Experience the future of cloud storage today.\n            </p>\n          </div>\n\n        {/* Mission Statement */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Our Mission</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-lg text-muted-foreground\">\n              We believe that file storage and sharing should be simple, secure, and accessible from anywhere. \n              Our AI-powered storage solution combines cutting-edge technology with intuitive design to create \n              the ultimate cloud storage experience.\n            </p>\n            <p className=\"text-muted-foreground\">\n              Whether you're a creative professional managing large media files, a business team collaborating \n              on documents, or an individual looking to backup precious memories, AI Storage Solution provides \n              the tools and infrastructure you need to stay organized and productive.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Key Features */}\n        <div className=\"space-y-8 p-8 rounded-3xl shadow-2xl\" style={{ backgroundColor: 'beige' }}>\n          <h2 className=\"text-3xl font-bold text-center text-gray-800 drop-shadow-lg mb-8\">Key Features</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"bg-white/95 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105 rounded-2xl\">\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n                  <Upload className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl font-bold text-gray-800\">Easy File Upload</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 leading-relaxed\">\n                  Drag-and-drop interface with support for multiple file types. \n                  Upload progress tracking and automatic organization.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/95 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105 rounded-2xl\">\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-green-500 to-teal-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n                  <Share2 className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl font-bold text-gray-800\">Secure Sharing</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 leading-relaxed\">\n                  Generate secure sharing links for files and folders. \n                  Control access permissions and track sharing activity.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/95 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105 rounded-2xl\">\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-orange-500 to-red-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n                  <BarChart3 className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl font-bold text-gray-800\">Analytics Dashboard</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 leading-relaxed\">\n                  Comprehensive insights into your storage usage, file types, \n                  and sharing patterns with interactive charts.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/95 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105 rounded-2xl\">\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n                  <Shield className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl font-bold text-gray-800\">Enterprise Security</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 leading-relaxed\">\n                  End-to-end encryption, secure authentication, and \n                  compliance with industry security standards.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/95 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105 rounded-2xl\">\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n                  <Zap className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl font-bold text-gray-800\">High Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 leading-relaxed\">\n                  Lightning-fast uploads and downloads powered by \n                  AWS S3 infrastructure and global CDN distribution.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/95 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105 rounded-2xl\">\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n                  <Globe className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl font-bold text-gray-800\">Global Access</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 leading-relaxed\">\n                  Access your files from anywhere in the world with \n                  our responsive web interface and mobile-optimized design.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Technology Stack */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Database className=\"h-6 w-6\" />\n              Technology Stack\n            </CardTitle>\n            <CardDescription>\n              Built with modern, reliable technologies for optimal performance and scalability.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-medium mb-3\">Frontend</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"secondary\">React 18</Badge>\n                  <Badge variant=\"secondary\">TypeScript</Badge>\n                  <Badge variant=\"secondary\">Vite</Badge>\n                  <Badge variant=\"secondary\">Tailwind CSS</Badge>\n                  <Badge variant=\"secondary\">shadcn/ui</Badge>\n                  <Badge variant=\"secondary\">TanStack Query</Badge>\n                  <Badge variant=\"secondary\">React Hook Form</Badge>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium mb-3\">Backend</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"secondary\">Node.js</Badge>\n                  <Badge variant=\"secondary\">Express.js</Badge>\n                  <Badge variant=\"secondary\">TypeScript</Badge>\n                  <Badge variant=\"secondary\">Passport.js</Badge>\n                  <Badge variant=\"secondary\">Drizzle ORM</Badge>\n                  <Badge variant=\"secondary\">Zod Validation</Badge>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-3\">Infrastructure</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"secondary\">PostgreSQL</Badge>\n                  <Badge variant=\"secondary\">AWS S3</Badge>\n                  <Badge variant=\"secondary\">Replit Hosting</Badge>\n                  <Badge variant=\"secondary\">Docker Support</Badge>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"text-center p-6 rounded-2xl shadow-lg\" style={{ backgroundColor: 'cornflowerblue' }}>\n            <div className=\"text-3xl font-bold text-white mb-2\">1TB</div>\n            <p className=\"text-white/90 font-medium\">Free Storage Space</p>\n          </div>\n          \n          <div className=\"text-center p-6 rounded-2xl shadow-lg\" style={{ backgroundColor: 'cornflowerblue' }}>\n            <div className=\"text-3xl font-bold text-white mb-2\">99.9%</div>\n            <p className=\"text-white/90 font-medium\">Uptime Guarantee</p>\n          </div>\n          \n          <div className=\"text-center p-6 rounded-2xl shadow-lg\" style={{ backgroundColor: 'cornflowerblue' }}>\n            <div className=\"text-3xl font-bold text-white mb-2\">256-bit</div>\n            <p className=\"text-white/90 font-medium\">AES Encryption</p>\n          </div>\n          \n          <div className=\"text-center p-6 rounded-2xl shadow-lg\" style={{ backgroundColor: 'cornflowerblue' }}>\n            <div className=\"text-3xl font-bold text-white mb-2\">24/7</div>\n            <p className=\"text-white/90 font-medium\">Customer Support</p>\n          </div>\n        </div>\n\n        {/* Team and Contact */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Our Team\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">\n                AI Storage Solution is developed by a dedicated team of engineers, designers, \n                and cloud infrastructure specialists who are passionate about creating \n                innovative storage solutions.\n              </p>\n              <p className=\"text-muted-foreground\">\n                We continuously work to improve our platform based on user feedback and \n                emerging technologies in the cloud storage space.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Get In Touch</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Have questions, suggestions, or want to collaborate? We'd love to hear from you.\n              </p>\n              <div className=\"flex flex-col gap-2\">\n                <Button variant=\"outline\" className=\"justify-start\" asChild>\n                  <a href=\"/help\" data-testid=\"link-help\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Contact Support\n                  </a>\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" asChild>\n                  <a href=\"https://github.com/replit\" target=\"_blank\" rel=\"noopener noreferrer\" data-testid=\"link-github\">\n                    <Github className=\"h-4 w-4 mr-2\" />\n                    View on GitHub\n                    <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                  </a>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-8 rounded-3xl shadow-2xl\" style={{ backgroundColor: 'navy' }}>\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center space-x-2 mb-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg\">\n                <Cloud className=\"h-6 w-6 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-white\">AI Storage Solution</h3>\n            </div>\n            <p className=\"text-cyan-200 text-lg font-medium\">\n              ¬© 2024 AI Storage Solution. Built with ‚ù§Ô∏è for the modern web.\n            </p>\n            <p className=\"text-cyan-300 text-sm\">\n              Powered by React, Node.js, and AWS infrastructure.\n            </p>\n            <div className=\"flex justify-center space-x-4 mt-6\">\n              <div className=\"w-2 h-2 bg-cyan-400 rounded-full animate-pulse\"></div>\n              <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n              <div className=\"w-2 h-2 bg-teal-400 rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15185},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ChartContainer, ChartTooltip } from \"@/components/ui/chart\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigation } from \"@/hooks/useNavigation\";\nimport Sidebar from \"@/components/sidebar\";\nimport {\n  PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, LineChart, Line, ResponsiveContainer, Area, AreaChart\n} from \"recharts\";\nimport { \n  HardDrive, \n  Files, \n  Share, \n  RefreshCw,\n  TrendingUp,\n  Database,\n  Clock,\n  FileText\n} from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface AnalyticsData {\n  capacityBytes: number;\n  usedBytes: number;\n  availableBytes: number;\n  usagePct: number;\n  counts: {\n    files: number;\n    folders: number;\n    shared: number;\n  };\n  filesByType: Array<{\n    type: string;\n    count: number;\n    bytes: number;\n  }>;\n  sizeDistribution: Array<{\n    range: string;\n    count: number;\n    bytes: number;\n  }>;\n  bucketUsage: Array<{\n    bucket: string;\n    count: number;\n    bytes: number;\n  }>;\n  topFiles: Array<{\n    id: number;\n    name: string;\n    bytes: number;\n    mimeType: string;\n  }>;\n  recentUploads: Array<{\n    id: number;\n    name: string;\n    bytes: number;\n    uploadedAt: string;\n  }>;\n  usageHistory: Array<{\n    date: string;\n    timestamp: number;\n    usedBytes: number;\n    fileCount: number;\n    usagePercent: number;\n  }>;\n  uploadActivity: Array<{\n    date: string;\n    uploads: number;\n    bytesUploaded: number;\n  }>;\n  partial: boolean;\n  refreshedAt: number;\n  includeExternal: boolean;\n}\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { currentLocation } = useNavigation();\n  const [includeExternal, setIncludeExternal] = useState(false);\n  \n  // Determine if we're in a specific disk context\n  const isInDiskContext = currentLocation.type === 's3-bucket' || currentLocation.type === 's3-prefix';\n  const selectedDiskName = isInDiskContext \n    ? (currentLocation.type === 's3-bucket' ? currentLocation.name : currentLocation.bucketName)\n    : null;\n\n  // Set up Server-Sent Events for real-time analytics updates\n  useEffect(() => {\n    const eventSource = new EventSource('/api/analytics/events', { withCredentials: true });\n    \n    eventSource.onopen = () => {\n      console.log('Analytics SSE connection opened');\n    };\n    \n    eventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'analytics:update') {\n          // Invalidate and refetch analytics data\n          queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n        }\n      } catch (error) {\n        console.error('Error parsing SSE event:', error);\n      }\n    };\n    \n    eventSource.onerror = (error) => {\n      console.error('Analytics SSE error:', error);\n    };\n    \n    // Cleanup on unmount\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  const { data: analytics, isLoading, refetch, error } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/analytics\", includeExternal, selectedDiskName],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (includeExternal && !isInDiskContext) params.append('includeExternal', 'true');\n      if (selectedDiskName) params.append('selectedDisk', selectedDiskName);\n      const response = await fetch(`/api/analytics?${params}`, { credentials: 'include' });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    },\n    refetchInterval: (query) => document.visibilityState === 'visible' ? 10000 : false, // 10 seconds for more real-time updates\n    refetchOnWindowFocus: true,\n    retry: 2,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  const handleRefresh = async () => {\n    try {\n      // Force refresh by adding refresh=true parameter\n      const params = new URLSearchParams();\n      params.append('refresh', 'true');\n      if (includeExternal && !isInDiskContext) params.append('includeExternal', 'true');\n      if (selectedDiskName) params.append('selectedDisk', selectedDiskName);\n      \n      const response = await fetch(`/api/analytics?${params}`, { credentials: 'include' });\n      if (!response.ok) {\n        throw new Error(`Refresh failed: ${response.status} ${response.statusText}`);\n      }\n      \n      await refetch();\n      \n      toast({\n        title: \"Analytics Refreshed\",\n        description: selectedDiskName \n          ? `Analytics for ${selectedDiskName} refreshed`\n          : \"Latest storage analytics have been loaded\",\n      });\n    } catch (error) {\n      console.error('Refresh error:', error);\n      toast({\n        title: \"Refresh Failed\",\n        description: \"Failed to refresh analytics data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatBytes = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatDate = (dateString: string): string => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\" style={{ backgroundColor: 'aqua' }}>\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading analytics...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !analytics) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\" style={{ backgroundColor: 'aqua' }}>\n          <div className=\"text-center\">\n            <p className=\"text-gray-500 mb-4\">\n              {error ? `Failed to load analytics data: ${error.message}` : 'Failed to load analytics data'}\n            </p>\n            <Button \n              onClick={handleRefresh} \n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Retry\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const storageData = [\n    { name: 'Used', value: analytics.usedBytes, color: '#3b82f6' },\n    { name: 'Available', value: analytics.availableBytes, color: '#e5e7eb' }\n  ];\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\" style={{ backgroundColor: 'aqua' }}>\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-analytics-title\">\n                {isInDiskContext ? `${selectedDiskName} Analytics` : 'Analytics'}\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n                {isInDiskContext \n                  ? `Storage insights and usage statistics for ${selectedDiskName}` \n                  : \"Cloud storage insights and usage statistics\"}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              {/* Show disk info instead of toggle when in disk context */}\n              {isInDiskContext ? (\n                <div className=\"flex items-center space-x-2 px-4 py-2 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg\">\n                  <Database className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                  <span className=\"text-blue-900 dark:text-blue-100 font-medium\">{selectedDiskName}</span>\n                  <Badge variant=\"outline\" className=\"bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 border-blue-300 dark:border-blue-600\">\n                    {currentLocation.type === 's3-bucket' ? 'Disk' : 'Folder'}\n                  </Badge>\n                </div>\n              ) : (\n                <Button\n                  variant={includeExternal ? \"default\" : \"outline\"}\n                  onClick={() => setIncludeExternal(!includeExternal)}\n                  data-testid=\"button-toggle-external\"\n                  className={includeExternal \n                    ? \"bg-blue-600 hover:bg-blue-700 text-white\" \n                    : \"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  }\n                >\n                  <Database className=\"h-4 w-4 mr-2\" />\n                  {includeExternal ? 'Hide External' : 'Include External'}\n                </Button>\n              )}\n              <Button \n                onClick={handleRefresh} \n                data-testid=\"button-refresh-analytics\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Capacity</p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-total-capacity\">\n                      {formatBytes(analytics.capacityBytes)}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center\">\n                    <HardDrive className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Used Space</p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-used-space\">\n                      {formatBytes(analytics.usedBytes)}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center\">\n                    <TrendingUp className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Files</p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-total-files\">\n                      {analytics.counts.files.toLocaleString()}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg bg-green-100 dark:bg-green-900/20 flex items-center justify-center\">\n                    <Files className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Shared Items</p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-shared-items\">\n                      {analytics.counts.shared}\n                    </p>\n                  </div>\n                  <div className=\"h-12 w-12 rounded-lg bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center\">\n                    <Share className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            {/* Storage Usage Donut Chart */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">Storage Usage</CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Used vs Available Space</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"relative\">\n                    <ChartContainer config={{}} className=\"h-64 w-64\">\n                      <PieChart>\n                        <Pie\n                          data={storageData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={80}\n                          outerRadius={120}\n                          paddingAngle={2}\n                          dataKey=\"value\"\n                        >\n                          {storageData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <ChartTooltip \n                          content={({ active, payload }) => {\n                            if (active && payload && payload[0]) {\n                              return (\n                                <div className=\"bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg\">\n                                  <p className=\"font-medium text-gray-900 dark:text-white\">{payload[0].name}</p>\n                                  <p className=\"text-blue-600 dark:text-blue-400\">{formatBytes(payload[0].value as number)}</p>\n                                </div>\n                              );\n                            }\n                            return null;\n                          }}\n                        />\n                      </PieChart>\n                    </ChartContainer>\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <p className=\"text-3xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-usage-percentage\">\n                          {analytics.usagePct.toFixed(1)}%\n                        </p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Used</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* File Types Chart */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">File Types Distribution</CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Files by type and size</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"py-4\">\n                  {analytics.filesByType.length > 0 ? (\n                    <ChartContainer config={{}} className=\"h-64\">\n                      <BarChart data={analytics.filesByType} margin={{ top: 20, right: 30, left: 20, bottom: 40 }}>\n                        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                        <XAxis \n                          dataKey=\"type\" \n                          tick={{ fill: 'currentColor' }}\n                          className=\"text-gray-600 dark:text-gray-400\"\n                        />\n                        <YAxis \n                          tick={{ fill: 'currentColor' }}\n                          className=\"text-gray-600 dark:text-gray-400\"\n                        />\n                        <ChartTooltip\n                          content={({ active, payload, label }) => {\n                            if (active && payload && payload[0]) {\n                              return (\n                                <div className=\"bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg\">\n                                  <p className=\"font-medium text-gray-900 dark:text-white\">{label}</p>\n                                  <p className=\"text-blue-600 dark:text-blue-400\">Files: {payload[0].payload.count}</p>\n                                  <p className=\"text-green-600 dark:text-green-400\">Size: {formatBytes(payload[0].value as number)}</p>\n                                </div>\n                              );\n                            }\n                            return null;\n                          }}\n                        />\n                        <Bar dataKey=\"bytes\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                      </BarChart>\n                    </ChartContainer>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-64 text-gray-500 dark:text-gray-400\">\n                      <div className=\"text-center\">\n                        <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-400 dark:text-gray-600\" />\n                        <p>No files found</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts Row 2 */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            {/* File Size Distribution */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">File Size Distribution</CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Files grouped by size ranges</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer config={{}} className=\"h-64\">\n                  <BarChart data={analytics.sizeDistribution} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                    <XAxis \n                      dataKey=\"range\" \n                      angle={-45} \n                      textAnchor=\"end\" \n                      height={80}\n                      tick={{ fill: 'currentColor' }}\n                      className=\"text-gray-600 dark:text-gray-400\"\n                    />\n                    <YAxis \n                      tick={{ fill: 'currentColor' }}\n                      className=\"text-gray-600 dark:text-gray-400\"\n                    />\n                    <ChartTooltip\n                      content={({ active, payload, label }) => {\n                        if (active && payload && payload[0]) {\n                          return (\n                            <div className=\"bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg\">\n                              <p className=\"font-medium text-gray-900 dark:text-white\">{label}</p>\n                              <p className=\"text-blue-600 dark:text-blue-400\">Files: {payload[0].payload.count}</p>\n                              <p className=\"text-green-600 dark:text-green-400\">Total Size: {formatBytes(payload[0].payload.bytes)}</p>\n                            </div>\n                          );\n                        }\n                        return null;\n                      }}\n                    />\n                    <Bar dataKey=\"count\" fill=\"#10b981\" radius={[4, 4, 0, 0]} />\n                  </BarChart>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n\n            {/* Bucket Usage */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">S3 Bucket Usage</CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Storage usage by bucket</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analytics.bucketUsage.length > 0 ? (\n                  <ChartContainer config={{}} className=\"h-64\">\n                    <BarChart data={analytics.bucketUsage} margin={{ top: 20, right: 30, left: 20, bottom: 40 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                      <XAxis \n                        dataKey=\"bucket\"\n                        tick={{ fill: 'currentColor' }}\n                        className=\"text-gray-600 dark:text-gray-400\"\n                      />\n                      <YAxis \n                        tick={{ fill: 'currentColor' }}\n                        className=\"text-gray-600 dark:text-gray-400\"\n                      />\n                      <ChartTooltip\n                        content={({ active, payload, label }) => {\n                          if (active && payload && payload[0]) {\n                            return (\n                              <div className=\"bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg\">\n                                <p className=\"font-medium text-gray-900 dark:text-white\">{label}</p>\n                                <p className=\"text-blue-600 dark:text-blue-400\">Files: {payload[0].payload.count}</p>\n                                <p className=\"text-green-600 dark:text-green-400\">Size: {formatBytes(payload[0].value as number)}</p>\n                              </div>\n                            );\n                          }\n                          return null;\n                        }}\n                      />\n                      <Bar dataKey=\"bytes\" fill=\"#f59e0b\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                  </ChartContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-64 text-gray-500 dark:text-gray-400\">\n                    <div className=\"text-center\">\n                      <Database className=\"h-12 w-12 mx-auto mb-4 text-gray-400 dark:text-gray-600\" />\n                      <p>No S3 buckets with files found</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Time-Series Charts Row */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            {/* Storage Usage History */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2 text-blue-600 dark:text-blue-400\" />\n                  Storage Usage Over Time\n                </CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Cumulative storage usage (last 30 days)</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer config={{}} className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart data={analytics.usageHistory} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                      <XAxis \n                        dataKey=\"date\"\n                        tick={{ fill: 'currentColor', fontSize: 12 }}\n                        className=\"text-gray-600 dark:text-gray-400\"\n                        tickFormatter={(value) => {\n                          const date = new Date(value);\n                          return `${date.getMonth() + 1}/${date.getDate()}`;\n                        }}\n                      />\n                      <YAxis \n                        tick={{ fill: 'currentColor', fontSize: 12 }}\n                        className=\"text-gray-600 dark:text-gray-400\"\n                        tickFormatter={(value) => formatBytes(value)}\n                      />\n                      <ChartTooltip\n                        content={({ active, payload, label }) => {\n                          if (active && payload && payload[0]) {\n                            const data = payload[0].payload;\n                            return (\n                              <div className=\"bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg\">\n                                <p className=\"font-medium text-gray-900 dark:text-white\">{new Date(label).toLocaleDateString()}</p>\n                                <p className=\"text-blue-600 dark:text-blue-400\">Used: {formatBytes(data.usedBytes)}</p>\n                                <p className=\"text-green-600 dark:text-green-400\">Files: {data.fileCount}</p>\n                                <p className=\"text-purple-600 dark:text-purple-400\">Usage: {data.usagePercent.toFixed(2)}%</p>\n                              </div>\n                            );\n                          }\n                          return null;\n                        }}\n                      />\n                      <Area\n                        type=\"monotone\"\n                        dataKey=\"usedBytes\"\n                        stroke=\"#3b82f6\"\n                        fill=\"#3b82f6\"\n                        fillOpacity={0.2}\n                        strokeWidth={2}\n                        dot={{ fill: '#3b82f6', r: 3 }}\n                        activeDot={{ r: 5, stroke: '#3b82f6', strokeWidth: 2, fill: '#fff' }}\n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n\n            {/* Upload Activity */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n                  <Files className=\"h-5 w-5 mr-2 text-green-600 dark:text-green-400\" />\n                  Upload Activity\n                </CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Daily upload count and volume (last 7 days)</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer config={{}} className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={analytics.uploadActivity} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                      <XAxis \n                        dataKey=\"date\"\n                        tick={{ fill: 'currentColor', fontSize: 12 }}\n                        className=\"text-gray-600 dark:text-gray-400\"\n                        tickFormatter={(value) => {\n                          const date = new Date(value);\n                          return `${date.getMonth() + 1}/${date.getDate()}`;\n                        }}\n                      />\n                      <YAxis \n                        yAxisId=\"count\"\n                        orientation=\"left\"\n                        tick={{ fill: 'currentColor', fontSize: 12 }}\n                        className=\"text-gray-600 dark:text-gray-400\"\n                        label={{ value: 'Files', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle' } }}\n                      />\n                      <YAxis \n                        yAxisId=\"bytes\"\n                        orientation=\"right\"\n                        tick={{ fill: 'currentColor', fontSize: 12 }}\n                        className=\"text-gray-600 dark:text-gray-400\"\n                        tickFormatter={(value) => formatBytes(value)}\n                        label={{ value: 'Size', angle: 90, position: 'insideRight', style: { textAnchor: 'middle' } }}\n                      />\n                      <ChartTooltip\n                        content={({ active, payload, label }) => {\n                          if (active && payload && payload.length) {\n                            const data = payload[0].payload;\n                            return (\n                              <div className=\"bg-white dark:bg-gray-800 p-3 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg\">\n                                <p className=\"font-medium text-gray-900 dark:text-white\">{new Date(label).toLocaleDateString()}</p>\n                                <p className=\"text-green-600 dark:text-green-400\">Uploads: {data.uploads}</p>\n                                <p className=\"text-blue-600 dark:text-blue-400\">Volume: {formatBytes(data.bytesUploaded)}</p>\n                              </div>\n                            );\n                          }\n                          return null;\n                        }}\n                      />\n                      <Line\n                        yAxisId=\"count\"\n                        type=\"monotone\"\n                        dataKey=\"uploads\"\n                        stroke=\"#10b981\"\n                        strokeWidth={2}\n                        dot={{ fill: '#10b981', r: 4 }}\n                        activeDot={{ r: 6, stroke: '#10b981', strokeWidth: 2, fill: '#fff' }}\n                        name=\"Upload Count\"\n                      />\n                      <Line\n                        yAxisId=\"bytes\"\n                        type=\"monotone\"\n                        dataKey=\"bytesUploaded\"\n                        stroke=\"#3b82f6\"\n                        strokeWidth={2}\n                        strokeDasharray=\"5 5\"\n                        dot={{ fill: '#3b82f6', r: 3 }}\n                        activeDot={{ r: 5, stroke: '#3b82f6', strokeWidth: 2, fill: '#fff' }}\n                        name=\"Upload Volume\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Tables Row */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Top Files */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">Largest Files</CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Top 10 files by size</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {analytics.topFiles.length > 0 ? (\n                    analytics.topFiles.map((file, index) => (\n                      <div key={file.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\" data-testid={`row-top-file-${index}`}>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                            <FileText className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900 dark:text-white truncate max-w-48\">{file.name}</p>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\">{file.mimeType}</p>\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" data-testid={`text-file-size-${index}`} className=\"border-gray-200 dark:border-gray-600 text-gray-700 dark:text-gray-300\">\n                          {formatBytes(file.bytes)}\n                        </Badge>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                      <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-400 dark:text-gray-600\" />\n                      <p>No files found</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Uploads */}\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">Recent Uploads</CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">Latest files (last 30 days)</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {analytics.recentUploads.length > 0 ? (\n                    analytics.recentUploads.map((file, index) => (\n                      <div key={file.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\" data-testid={`row-recent-upload-${index}`}>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                            <Clock className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900 dark:text-white truncate max-w-48\">{file.name}</p>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\">{formatDate(file.uploadedAt)}</p>\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" data-testid={`text-recent-file-size-${index}`} className=\"border-gray-200 dark:border-gray-600 text-gray-700 dark:text-gray-300\">\n                          {formatBytes(file.bytes)}\n                        </Badge>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                      <Clock className=\"h-12 w-12 mx-auto mb-4 text-gray-400 dark:text-gray-600\" />\n                      <p>No recent uploads</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Footer Info */}\n          {analytics.partial && (\n            <div className=\"mt-8 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <Clock className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                    Data is partial due to large bucket sizes. Some external S3 objects may not be included.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"mt-4 text-center text-sm text-gray-500 dark:text-gray-400\">\n            Last updated: {new Date(analytics.refreshedAt).toLocaleString()}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":37519},"client/src/pages/change-email.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { ArrowLeft, Mail, AlertTriangle } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst emailSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  confirmEmail: z.string().email(\"Please enter a valid email address\"),\n}).refine((data) => data.email === data.confirmEmail, {\n  message: \"Email addresses don't match\",\n  path: [\"confirmEmail\"],\n});\n\ntype EmailFormData = z.infer<typeof emailSchema>;\n\nexport default function ChangeEmail() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [pendingEmailData, setPendingEmailData] = useState<EmailFormData | null>(null);\n\n  const emailForm = useForm<EmailFormData>({\n    resolver: zodResolver(emailSchema),\n    defaultValues: {\n      email: \"\",\n      confirmEmail: \"\",\n    },\n  });\n\n  const updateEmailMutation = useMutation({\n    mutationFn: async (data: { email: string }) => {\n      return apiRequest('POST', '/api/auth/update-email', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email Updated\",\n        description: \"Your email has been successfully updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      emailForm.reset();\n      // Redirect back to settings page after successful update\n      setTimeout(() => setLocation(\"/settings\"), 1500);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onEmailSubmit = (data: EmailFormData) => {\n    setPendingEmailData(data);\n    setShowConfirmDialog(true);\n  };\n\n  const handleConfirmChange = () => {\n    if (pendingEmailData) {\n      updateEmailMutation.mutate({ email: pendingEmailData.email });\n    }\n    setShowConfirmDialog(false);\n    setPendingEmailData(null);\n  };\n\n  const handleCancelChange = () => {\n    setShowConfirmDialog(false);\n    setPendingEmailData(null);\n  };\n\n  return (\n    <div className=\"container max-w-2xl mx-auto py-10\">\n      <div className=\"space-y-6\">\n        {/* Back button and header */}\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/settings\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Settings\n            </Button>\n          </Link>\n        </div>\n\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Mail className=\"h-8 w-8\" />\n            Change Email Address\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Update your email address for account notifications and login.\n          </p>\n        </div>\n\n        {/* Current Email Display */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm font-medium\">Current Email</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-2\">\n              <Mail className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm\" data-testid=\"text-current-email\">\n                {user?.email || \"No email set\"}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Important Notice */}\n        <Alert>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Important:</strong> After changing your email address, you'll need to use the new email to log in. \n            Make sure you have access to the new email address before proceeding.\n          </AlertDescription>\n        </Alert>\n\n        {/* Email Update Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>New Email Address</CardTitle>\n            <CardDescription>\n              Enter your new email address below. You'll need to confirm this change.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...emailForm}>\n              <form onSubmit={emailForm.handleSubmit(onEmailSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={emailForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Email Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\" \n                          placeholder=\"Enter your new email address\"\n                          data-testid=\"input-new-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={emailForm.control}\n                  name=\"confirmEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm New Email Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\" \n                          placeholder=\"Confirm your new email address\"\n                          data-testid=\"input-confirm-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  disabled={updateEmailMutation.isPending}\n                  data-testid=\"button-update-email\"\n                >\n                  {updateEmailMutation.isPending ? \"Updating...\" : \"Update Email Address\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Confirmation Dialog */}\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent data-testid=\"dialog-confirm-email-change\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirm Email Change</AlertDialogTitle>\n            <AlertDialogDescription className=\"space-y-2\">\n              <p>You are about to change your email address from:</p>\n              <div className=\"bg-muted p-2 rounded text-sm\">\n                <strong>Current:</strong> {user?.email}\n              </div>\n              <div className=\"bg-muted p-2 rounded text-sm\">\n                <strong>New:</strong> {pendingEmailData?.email}\n              </div>\n              <p className=\"text-sm text-amber-600 mt-2\">\n                <strong>Warning:</strong> You will need to use the new email address to log in after this change.\n              </p>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={handleCancelChange}\n              data-testid=\"button-cancel-email-change\"\n            >\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleConfirmChange}\n              data-testid=\"button-confirm-email-change\"\n            >\n              Confirm Change\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":8491},"client/src/pages/change-password.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { Eye, EyeOff, ArrowLeft, Lock } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nconst passwordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters long\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype PasswordFormData = z.infer<typeof passwordSchema>;\n\nexport default function ChangePassword() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const passwordForm = useForm<PasswordFormData>({\n    resolver: zodResolver(passwordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const updatePasswordMutation = useMutation({\n    mutationFn: async (data: PasswordFormData) => {\n      return apiRequest('POST', '/api/auth/update-password', {\n        currentPassword: data.currentPassword,\n        newPassword: data.newPassword,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Updated\",\n        description: \"Your password has been successfully updated.\",\n      });\n      passwordForm.reset();\n      // Redirect back to settings page after successful update\n      setTimeout(() => setLocation(\"/settings\"), 1500);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onPasswordSubmit = (data: PasswordFormData) => {\n    updatePasswordMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"container max-w-2xl mx-auto py-10\">\n      <div className=\"space-y-6\">\n        {/* Back button and header */}\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/settings\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Settings\n            </Button>\n          </Link>\n        </div>\n\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Lock className=\"h-8 w-8\" />\n            Change Password\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Change your password to keep your account secure.\n          </p>\n        </div>\n\n        {/* Password Update Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Password</CardTitle>\n            <CardDescription>\n              Change your password to keep your account secure.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...passwordForm}>\n              <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={passwordForm.control}\n                  name=\"currentPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showCurrentPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your current password\"\n                            data-testid=\"input-current-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                            data-testid=\"button-toggle-current-password\"\n                          >\n                            {showCurrentPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={passwordForm.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showNewPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your new password\"\n                            data-testid=\"input-new-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowNewPassword(!showNewPassword)}\n                            data-testid=\"button-toggle-new-password\"\n                          >\n                            {showNewPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={passwordForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm New Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"Confirm your new password\"\n                            data-testid=\"input-confirm-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-confirm-password\"\n                          >\n                            {showConfirmPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  disabled={updatePasswordMutation.isPending}\n                  data-testid=\"button-update-password\"\n                >\n                  {updatePasswordMutation.isPending ? \"Updating...\" : \"Update Password\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8803},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\nimport FileUpload from \"@/components/file-upload\";\nimport FileTable from \"@/components/file-table\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Search, Plus, HardDrive, CheckCircle, FileText, Share, FolderPlus, Wifi, WifiOff } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [showConnectionModal, setShowConnectionModal] = useState(false);\n  const [s3Credentials, setS3Credentials] = useState({\n    accessKeyId: '',\n    secretAccessKey: '',\n    region: 'us-east-1'\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<{\n    totalFiles?: number;\n    totalFolders?: number;\n    totalSize?: number;\n    sharedFiles?: number;\n    totalCapacity?: number;\n    usagePercentage?: number;\n  }>({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  // Query S3 connection status from server\n  const { data: s3Status, isLoading: s3StatusLoading } = useQuery<{\n    connected?: boolean;\n    region?: string;\n  }>({\n    queryKey: [\"/api/s3/status\"],\n    retry: false,\n  });\n\n  const isS3Connected = s3Status?.connected || false;\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // S3 Connection mutation  \n  const connectMutation = useMutation({\n    mutationFn: async (credentials: typeof s3Credentials) => {\n      const response = await fetch('/api/s3/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Connection failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate connection status query to refetch\n      queryClient.invalidateQueries({ queryKey: [\"/api/s3/status\"] });\n      setShowConnectionModal(false);\n      setS3Credentials({ accessKeyId: '', secretAccessKey: '', region: 'us-east-1' });\n      toast({\n        title: \"Connection Successful\",\n        description: \"S3 connection is active\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleS3Connect = () => {\n    if (!s3Credentials.accessKeyId || !s3Credentials.secretAccessKey) {\n      toast({\n        title: \"Missing Credentials\",\n        description: \"Please enter both access key and secret key\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    connectMutation.mutate(s3Credentials);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 p-6 bg-aqua\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Dashboard</h2>\n            <p className=\"text-gray-600 mt-1\">Manage your cloud storage files</p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Input \n                type=\"text\" \n                placeholder=\"Search files...\" \n                className=\"pl-10 pr-4 py-2 w-64\"\n              />\n              <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\n            </div>\n            \n            <Button \n              className={`flex items-center space-x-2 ${\n                isS3Connected \n                  ? \"bg-green-600 hover:bg-green-700\" \n                  : \"bg-primary hover:bg-blue-700\"\n              }`}\n              onClick={() => setShowConnectionModal(true)}\n              data-testid=\"button-connection\"\n            >\n              {isS3Connected ? (\n                <>\n                  <Wifi className=\"h-4 w-4\" />\n                  <span>Connected</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"h-4 w-4\" />\n                  <span>Connect S3</span>\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Storage Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <HardDrive className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Storage</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : formatFileSize(stats?.totalCapacity || 0)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Used Storage</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : formatFileSize(stats?.totalSize || 0)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Files</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : stats?.totalFiles || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <Share className=\"h-6 w-6 text-red-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Shared Files</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : stats?.sharedFiles || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* File Upload Zone */}\n        <FileUpload />\n\n        {/* File Management */}\n        <Card className=\"mt-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Virtual Disks</h3>\n              \n              <div className=\"flex items-center space-x-4\">\n                <Select defaultValue=\"all\">\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Files</SelectItem>\n                    <SelectItem value=\"documents\">Documents</SelectItem>\n                    <SelectItem value=\"images\">Images</SelectItem>\n                    <SelectItem value=\"videos\">Videos</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"flex bg-gray-100 rounded-lg\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"bg-white shadow-sm text-primary\">\n                    <FileText className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-500\">\n                    <HardDrive className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n            \n            <FileTable />\n          </CardContent>\n        </Card>\n      </main>\n      \n      {/* S3 Connection Modal */}\n      <Dialog open={showConnectionModal} onOpenChange={setShowConnectionModal}>\n        <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"modal-s3-connection\">\n          <DialogHeader>\n            <DialogTitle>Connect to S3</DialogTitle>\n            <DialogDescription>\n              Enter your AWS credentials to connect to your S3 buckets and access your files.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"accessKeyId\">Access Key ID</Label>\n              <Input\n                id=\"accessKeyId\"\n                type=\"text\"\n                placeholder=\"Enter your AWS Access Key ID\"\n                value={s3Credentials.accessKeyId}\n                onChange={(e) => setS3Credentials(prev => ({\n                  ...prev,\n                  accessKeyId: e.target.value\n                }))}\n                data-testid=\"input-access-key\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"secretAccessKey\">Secret Access Key</Label>\n              <Input\n                id=\"secretAccessKey\"\n                type=\"password\"\n                placeholder=\"Enter your AWS Secret Access Key\"\n                value={s3Credentials.secretAccessKey}\n                onChange={(e) => setS3Credentials(prev => ({\n                  ...prev,\n                  secretAccessKey: e.target.value\n                }))}\n                data-testid=\"input-secret-key\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"region\">Region</Label>\n              <RadioGroup\n                value={s3Credentials.region}\n                onValueChange={(value) => setS3Credentials(prev => ({\n                  ...prev,\n                  region: value\n                }))}\n                className=\"grid grid-cols-1 gap-2\"\n                data-testid=\"radio-group-region\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"us-east-1\" id=\"us-east-1\" />\n                  <Label htmlFor=\"us-east-1\" className=\"text-sm cursor-pointer\">US East (N. Virginia)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"us-west-1\" id=\"us-west-1\" />\n                  <Label htmlFor=\"us-west-1\" className=\"text-sm cursor-pointer\">US West (N. California)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"us-west-2\" id=\"us-west-2\" />\n                  <Label htmlFor=\"us-west-2\" className=\"text-sm cursor-pointer\">US West (Oregon)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"eu-west-1\" id=\"eu-west-1\" />\n                  <Label htmlFor=\"eu-west-1\" className=\"text-sm cursor-pointer\">Europe (Ireland)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"eu-central-1\" id=\"eu-central-1\" />\n                  <Label htmlFor=\"eu-central-1\" className=\"text-sm cursor-pointer\">Europe (Frankfurt)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"ap-southeast-1\" id=\"ap-southeast-1\" />\n                  <Label htmlFor=\"ap-southeast-1\" className=\"text-sm cursor-pointer\">Asia Pacific (Singapore)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"ap-northeast-1\" id=\"ap-northeast-1\" />\n                  <Label htmlFor=\"ap-northeast-1\" className=\"text-sm cursor-pointer\">Asia Pacific (Tokyo)</Label>\n                </div>\n              </RadioGroup>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowConnectionModal(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleS3Connect}\n              disabled={connectMutation.isPending}\n              data-testid=\"button-connect\"\n            >\n              {connectMutation.isPending ? \"Connecting...\" : \"Connect\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14832},"client/src/pages/edit-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Eye, EyeOff, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst emailSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\nconst passwordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters long\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype EmailFormData = z.infer<typeof emailSchema>;\ntype PasswordFormData = z.infer<typeof passwordSchema>;\n\nexport default function EditProfile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const emailForm = useForm<EmailFormData>({\n    resolver: zodResolver(emailSchema),\n    defaultValues: {\n      email: user?.email || \"\",\n    },\n  });\n\n  const passwordForm = useForm<PasswordFormData>({\n    resolver: zodResolver(passwordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const updateEmailMutation = useMutation({\n    mutationFn: async (data: EmailFormData) => {\n      return apiRequest('POST', '/api/auth/update-email', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email Updated\",\n        description: \"Your email has been successfully updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePasswordMutation = useMutation({\n    mutationFn: async (data: PasswordFormData) => {\n      return apiRequest('POST', '/api/auth/update-password', {\n        currentPassword: data.currentPassword,\n        newPassword: data.newPassword,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Updated\",\n        description: \"Your password has been successfully updated.\",\n      });\n      passwordForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onEmailSubmit = (data: EmailFormData) => {\n    updateEmailMutation.mutate(data);\n  };\n\n  const onPasswordSubmit = (data: PasswordFormData) => {\n    updatePasswordMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"container max-w-2xl mx-auto py-10\">\n      <div className=\"space-y-6\">\n        {/* Back button */}\n        <div className=\"flex items-center\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"text-gray-600 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-100 dark:hover:bg-gray-800 transition-colors\" \n            asChild \n            data-testid=\"button-back-to-settings\"\n          >\n            <Link href=\"/settings\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Settings\n            </Link>\n          </Button>\n        </div>\n        \n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Edit Profile</h1>\n          <p className=\"text-muted-foreground\">\n            Update your account settings and credentials.\n          </p>\n        </div>\n\n        {/* Email Update Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Email Address</CardTitle>\n            <CardDescription>\n              Update your email address for account notifications and login.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...emailForm}>\n              <form onSubmit={emailForm.handleSubmit(onEmailSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={emailForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\" \n                          placeholder=\"Enter your email\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  disabled={updateEmailMutation.isPending}\n                  data-testid=\"button-update-email\"\n                >\n                  {updateEmailMutation.isPending ? \"Updating...\" : \"Update Email\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <Separator />\n\n        {/* Password Update Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Password</CardTitle>\n            <CardDescription>\n              Change your password to keep your account secure.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...passwordForm}>\n              <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={passwordForm.control}\n                  name=\"currentPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showCurrentPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter current password\"\n                            data-testid=\"input-current-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                            data-testid=\"button-toggle-current-password\"\n                          >\n                            {showCurrentPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={passwordForm.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showNewPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter new password\"\n                            data-testid=\"input-new-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowNewPassword(!showNewPassword)}\n                            data-testid=\"button-toggle-new-password\"\n                          >\n                            {showNewPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={passwordForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm New Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            {...field} \n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"Confirm new password\"\n                            data-testid=\"input-confirm-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-confirm-password\"\n                          >\n                            {showConfirmPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  disabled={updatePasswordMutation.isPending}\n                  data-testid=\"button-update-password\"\n                >\n                  {updatePasswordMutation.isPending ? \"Updating...\" : \"Update Password\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11465},"client/src/pages/enhanced-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigation } from \"@/hooks/useNavigation\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\nimport FileUpload from \"@/components/file-upload\";\nimport FileTable from \"@/components/file-table\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { \n  Search, \n  CheckCircle, \n  FileText, \n  Share, \n  Wifi, \n  WifiOff, \n  Database, \n  ArrowLeft, \n  Folder,\n  HardDrive \n} from \"lucide-react\";\n\ninterface StatsData {\n  totalFiles?: number;\n  totalFolders?: number;\n  totalSize?: number;\n  sharedFiles?: number;\n  totalCapacity?: number;\n  usagePercentage?: number;\n}\n\ninterface S3StatusData {\n  connected?: boolean;\n  region?: string;\n}\n\ninterface S3BucketData {\n  buckets: Array<{\n    name: string;\n    creationDate?: string;\n  }>;\n}\n\nexport default function EnhancedDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { currentLocation, navigateTo, navigateBack, navigateToRoot } = useNavigation();\n  const [showConnectionModal, setShowConnectionModal] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [s3Credentials, setS3Credentials] = useState({\n    accessKeyId: '',\n    secretAccessKey: ''\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<StatsData>({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  // Query S3 connection status from server\n  const { data: s3Status, isLoading: s3StatusLoading } = useQuery<S3StatusData>({\n    queryKey: [\"/api/s3/status\"],\n    retry: false,\n  });\n\n  // Note: S3 connection invalidation is handled in connectMutation.onSuccess to avoid double-fetching\n\n  // Query S3 buckets when connected\n  const { data: s3BucketsData } = useQuery<S3BucketData>({\n    queryKey: [\"/api/s3/buckets\"],\n    enabled: !!s3Status?.connected,\n    retry: false,\n  });\n\n  const isS3Connected = s3Status?.connected || false;\n  const s3Buckets = s3BucketsData?.buckets || [];\n  \n  // Filter buckets based on search query\n  const filteredS3Buckets = s3Buckets.filter(bucket => \n    searchQuery === '' || bucket.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // S3 Connection mutation  \n  const connectMutation = useMutation({\n    mutationFn: async (credentials: typeof s3Credentials) => {\n      const response = await fetch('/api/s3/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Connection failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all dependent queries to refresh dashboard data\n      queryClient.invalidateQueries({ queryKey: [\"/api/s3/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/s3/buckets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/s3/objects\"] });\n      setShowConnectionModal(false);\n      setS3Credentials({ accessKeyId: '', secretAccessKey: '' });\n      toast({\n        title: \"Connection Successful\",\n        description: \"S3 connection is active\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleS3Connect = () => {\n    if (!s3Credentials.accessKeyId || !s3Credentials.secretAccessKey) {\n      toast({\n        title: \"Missing Credentials\",\n        description: \"Please enter both access key and secret key\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    connectMutation.mutate(s3Credentials);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-aqua\">\n      <Sidebar />\n      \n      <main className=\"flex-1 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Dashboard</h2>\n            <p className=\"text-gray-600 mt-1\">Manage your cloud storage files</p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button \n              className={`flex items-center space-x-2 ${\n                isS3Connected \n                  ? \"bg-green-600 hover:bg-green-700\" \n                  : \"bg-primary hover:bg-blue-700\"\n              }`}\n              onClick={() => setShowConnectionModal(true)}\n              data-testid=\"button-connection\"\n            >\n              {isS3Connected ? (\n                <>\n                  <Wifi className=\"h-4 w-4\" />\n                  <span>Connected</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"h-4 w-4\" />\n                  <span>Connect S3</span>\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Storage Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <HardDrive className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Storage</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : formatFileSize(stats?.totalCapacity || 0)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Used Storage</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : formatFileSize(stats?.totalSize || 0)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Files</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : stats?.totalFiles || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <Share className=\"h-6 w-6 text-red-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Shared Files</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {statsLoading ? \"...\" : stats?.sharedFiles || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Virtual Disks Section - Moved above Upload Files */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            {/* Virtual Disks Header with Navigation */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <button \n                  onClick={navigateToRoot}\n                  className=\"text-lg font-semibold text-gray-900 hover:text-gray-700 cursor-pointer\"\n                  data-testid=\"button-virtual-disks\"\n                >\n                  Virtual Disks\n                </button>\n              </div>\n              \n              <div className=\"flex items-center space-x-4\">\n                {/* Search functionality replacing filters */}\n                <div className=\"relative\">\n                  <Input \n                    type=\"text\" \n                    placeholder={currentLocation.type === 'root' ? \"Search files and folders\" : \"Search disks...\"} \n                    className=\"pl-10 pr-4 py-2 w-64\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-search\"\n                  />\n                  <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\n                </div>\n                \n                {/* Navigation back button on the right */}\n                {currentLocation.type !== 'root' && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={navigateBack}\n                    className=\"flex items-center space-x-1\"\n                    data-testid=\"button-back\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4\" />\n                    <span>Back</span>\n                  </Button>\n                )}\n              </div>\n            </div>\n            \n            {/* Selected Bucket Display */}\n            {isS3Connected && currentLocation.type === 's3-bucket' && (\n              <div className=\"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Database className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-blue-900\">Selected Disk</h4>\n                    <p className=\"text-blue-700\">{currentLocation.name}</p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800 ml-auto\">\n                    Connected\n                  </Badge>\n                </div>\n              </div>\n            )}\n            \n            {/* S3 Prefix Display */}\n            {isS3Connected && currentLocation.type === 's3-prefix' && (\n              <div className=\"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Folder className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-blue-900\">S3 Folder: {currentLocation.name}</h4>\n                    <p className=\"text-blue-700\">Bucket: {currentLocation.bucketName}</p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800 ml-auto\">\n                    S3 Folder\n                  </Badge>\n                </div>\n              </div>\n            )}\n            \n            {/* S3 Buckets Selection (only when at root and connected) */}\n            {isS3Connected && currentLocation.type === 'root' && s3Buckets.length > 0 && (\n              <div className=\"mb-6\">\n                <h4 className=\"text-md font-medium text-gray-700 mb-3\">Available Disks</h4>\n                {filteredS3Buckets.length === 0 && searchQuery !== '' ? (\n                  <div className=\"text-center py-8\">\n                    <Database className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No disks found matching \"{searchQuery}\"</p>\n                    <p className=\"text-sm text-gray-400\">Try a different search term</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {filteredS3Buckets.map((bucket) => (\n                    <Card \n                      key={bucket.name}\n                      className=\"cursor-pointer hover:shadow-md transition-shadow border-blue-200 bg-blue-50\"\n                      data-testid={`card-bucket-${bucket.name}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div \n                            className=\"flex items-center space-x-3 flex-1 min-w-0\"\n                            onClick={() => {\n                              const newPath = [...currentLocation.path, {\n                                type: 's3-bucket',\n                                name: bucket.name\n                              }];\n                              navigateTo({\n                                type: 's3-bucket',\n                                name: bucket.name,\n                                path: newPath\n                              });\n                            }}\n                          >\n                            <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center\">\n                              <Database className=\"h-5 w-5 text-blue-600\" />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"font-medium text-blue-900 truncate\">{bucket.name}</p>\n                            </div>\n                          </div>\n                          {/* Upload button on the right */}\n                          <Button\n                            size=\"sm\"\n                            className=\"ml-4 bg-blue-600 hover:bg-blue-700 text-white\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              // Navigate to bucket first, then trigger file upload\n                              const newPath = [...currentLocation.path, {\n                                type: 's3-bucket',\n                                name: bucket.name\n                              }];\n                              navigateTo({\n                                type: 's3-bucket',\n                                name: bucket.name,\n                                path: newPath\n                              });\n                              // Trigger file input after navigation\n                              setTimeout(() => {\n                                const fileInput = document.getElementById('bucket-file-upload') as HTMLInputElement;\n                                if (fileInput) fileInput.click();\n                              }, 100);\n                            }}\n                            data-testid={`button-upload-${bucket.name}`}\n                          >\n                            Upload\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Only show FileTable when not displaying S3 buckets at root level */}\n            {!(isS3Connected && currentLocation.type === 'root' && s3Buckets.length > 0) && (\n              <FileTable searchQuery={searchQuery} />\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* Hidden file input for bucket uploads */}\n        <input\n          type=\"file\"\n          multiple\n          id=\"bucket-file-upload\"\n          className=\"hidden\"\n          onChange={(e) => {\n            const files = Array.from(e.target.files || []);\n            if (files.length > 0) {\n              // This will be handled by the FileUpload component's upload logic\n              // when we're in a bucket context\n              console.log('Files selected for bucket upload:', files);\n            }\n          }}\n          data-testid=\"input-bucket-file-upload\"\n        />\n        \n        {/* Upload Files Section - Moved below Virtual Disks */}\n        <div className=\"mt-8\">\n          <FileUpload />\n        </div>\n      </main>\n      \n      {/* S3 Connection Modal */}\n      <Dialog open={showConnectionModal} onOpenChange={setShowConnectionModal}>\n        <DialogContent className=\"sm:max-w-[425px] bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 shadow-2xl z-50\" data-testid=\"modal-s3-connection\">\n          <DialogHeader>\n            <DialogTitle>Connect to S3</DialogTitle>\n            <DialogDescription>\n              Enter your AWS credentials to connect to your S3 buckets and access your files.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"accessKeyId\">Access Key ID</Label>\n              <Input\n                id=\"accessKeyId\"\n                type=\"text\"\n                placeholder=\"Enter your AWS Access Key ID\"\n                value={s3Credentials.accessKeyId}\n                onChange={(e) => setS3Credentials(prev => ({\n                  ...prev,\n                  accessKeyId: e.target.value\n                }))}\n                data-testid=\"input-access-key\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"secretAccessKey\">Secret Access Key</Label>\n              <Input\n                id=\"secretAccessKey\"\n                type=\"password\"\n                placeholder=\"Enter your AWS Secret Access Key\"\n                value={s3Credentials.secretAccessKey}\n                onChange={(e) => setS3Credentials(prev => ({\n                  ...prev,\n                  secretAccessKey: e.target.value\n                }))}\n                data-testid=\"input-secret-key\"\n              />\n            </div>\n            \n          </div>\n          \n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowConnectionModal(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleS3Connect}\n              disabled={connectMutation.isPending}\n              data-testid=\"button-connect\"\n            >\n              {connectMutation.isPending ? \"Connecting...\" : \"Connect\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20520},"client/src/pages/help.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mail, Phone, MessageCircle, HelpCircle, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst contactSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  category: z.string().min(1, \"Please select a category\"),\n  message: z.string().min(10, \"Message must be at least 10 characters long\"),\n});\n\ntype ContactFormData = z.infer<typeof contactSchema>;\n\nexport default function Help() {\n  const { toast } = useToast();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      subject: \"\",\n      category: \"\",\n      message: \"\",\n    },\n  });\n\n  const submitContactMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      return apiRequest('POST', '/api/contact', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for your message. We'll get back to you soon.\",\n      });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    submitContactMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50/50 via-emerald-50/30 to-blue-50/50 dark:from-green-950/20 dark:via-emerald-950/10 dark:to-blue-950/20\">\n      <div className=\"container max-w-4xl mx-auto py-10\">\n        <div className=\"space-y-8\">\n          {/* Back button */}\n          <div className=\"flex items-center\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-white/80 dark:hover:bg-gray-800/80\" asChild data-testid=\"button-back\">\n              <Link href=\"/settings\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Settings\n              </Link>\n            </Button>\n          </div>\n\n          {/* Enhanced header */}\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-4xl font-bold tracking-tight bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n              Help & Support\n            </h1>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Need help? We're here to assist you. Send us a message and we'll respond as soon as possible.\n            </p>\n          </div>\n\n          {/* Enhanced Quick Help Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm hover:shadow-xl hover:shadow-blue-500/10 transition-all duration-300\">\n              <CardHeader className=\"text-center space-y-3\">\n                <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900/30 mx-auto w-fit\">\n                  <HelpCircle className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <CardTitle className=\"text-lg\">Getting Started</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Learn how to upload, organize, and share your files with our cloud storage solution.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm hover:shadow-xl hover:shadow-purple-500/10 transition-all duration-300\">\n              <CardHeader className=\"text-center space-y-3\">\n                <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900/30 mx-auto w-fit\">\n                  <MessageCircle className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <CardTitle className=\"text-lg\">Feature Requests</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Have an idea for a new feature? We'd love to hear your suggestions and feedback.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm hover:shadow-xl hover:shadow-green-500/10 transition-all duration-300\">\n              <CardHeader className=\"text-center space-y-3\">\n                <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900/30 mx-auto w-fit\">\n                  <Phone className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n                </div>\n                <CardTitle className=\"text-lg\">Technical Support</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Experiencing technical issues? Our support team is ready to help resolve any problems.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n        {/* Contact Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Mail className=\"h-5 w-5\" />\n              Contact Us\n            </CardTitle>\n            <CardDescription>\n              Fill out the form below and we'll get back to you within 24 hours.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            placeholder=\"Enter your full name\"\n                            data-testid=\"input-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            data-testid=\"input-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"technical\">Technical Support</SelectItem>\n                            <SelectItem value=\"billing\">Billing & Account</SelectItem>\n                            <SelectItem value=\"feature\">Feature Request</SelectItem>\n                            <SelectItem value=\"bug\">Bug Report</SelectItem>\n                            <SelectItem value=\"general\">General Inquiry</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"subject\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Subject</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            placeholder=\"Brief description of your inquiry\"\n                            data-testid=\"input-subject\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Please provide detailed information about your inquiry...\"\n                          className=\"min-h-[120px]\"\n                          data-testid=\"textarea-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    type=\"submit\" \n                    disabled={submitContactMutation.isPending}\n                    data-testid=\"button-send\"\n                    className=\"w-full md:w-auto\"\n                  >\n                    {submitContactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* FAQ Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Frequently Asked Questions</CardTitle>\n            <CardDescription>\n              Quick answers to common questions about our cloud storage service.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">How much storage space do I get?</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Each account comes with 1TB of free cloud storage space. You can track your usage in the Analytics section.\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">How do I share files with others?</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                You can share individual files or entire folders by clicking the share button and generating a public link.\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Is my data secure?</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Yes, all files are encrypted and stored securely using industry-standard AWS S3 infrastructure.\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Can I access my files from mobile devices?</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Our web interface is mobile-responsive, allowing you to access and manage your files from any device.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12931},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Cloud, Upload, Share, Shield, Users, Zap } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/login\";\n  };\n\n  const handleSignup = () => {\n    window.location.href = \"/signup\";\n  };\n\n  return (\n    <div\n      className=\"min-h-screen flex flex-col\"\n      style={{\n        backgroundColor: 'cadetblue',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        MozUserSelect: 'none',\n        msUserSelect: 'none',\n      }}\n    >\n      {/* Header */}\n    <header\n      className=\"border-b border-gray-200 sticky top-0 z-50\"\n      style={{ backgroundColor: 'darkturquoise' }}\n    >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Cloud className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">AI Storage</h1>\n                <p className=\"text-xs text-gray-500\">Cloud Solution</p>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button onClick={handleLogin} variant=\"outline\">\n                Sign In\n              </Button>\n              <Button onClick={handleSignup} className=\"bg-primary hover:bg-blue-700\">\n                Sign Up\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 flex-1 flex items-center justify-center\">\n        <div className=\"max-w-4xl w-full mx-auto text-center glass-card p-10 modern-shadow\">\n          <h1 className=\"text-5xl font-bold text-gray-900 mb-6 drop-shadow-lg\">\n            Intelligent Cloud Storage\n            <span className=\"text-primary block animate-pulse\">Made Simple</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n            Securely store, manage, and share your files with advanced AI-powered organization. \n            Experience the future of cloud storage with seamless AWS S3 integration.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button \n              onClick={handleSignup}\n              className=\"modern-btn text-lg px-8 py-3\"\n            >\n              Get Started Free\n            </button>\n            <button \n              className=\"modern-btn modern-3d text-lg px-8 py-3\"\n              style={{ background: 'linear-gradient(90deg, #fff 0%, #e0e7ff 100%)', color: '#6366f1', border: '2px solid #6366f1' }}\n            >\n              Learn More\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n  <section className=\"py-20\" style={{ backgroundColor: 'darkturquoise' }}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Everything you need for modern file management\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Built with cutting-edge technology to provide you with the most secure and efficient storage solution.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"glass-card text-center p-6 hover:shadow-2xl transition-shadow modern-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Upload className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Drag & Drop Upload</h3>\n                <p className=\"text-gray-600\">\n                  Simply drag and drop your files or folders for instant upload to secure cloud storage.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card text-center p-6 hover:shadow-2xl transition-shadow modern-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Share className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Smart Sharing</h3>\n                <p className=\"text-gray-600\">\n                  Generate secure, time-limited links to share files with anyone, anywhere.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card text-center p-6 hover:shadow-2xl transition-shadow modern-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"h-8 w-8 text-purple-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Enterprise Security</h3>\n                <p className=\"text-gray-600\">\n                  Military-grade encryption and AWS S3 infrastructure ensure your data is always protected.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card text-center p-6 hover:shadow-2xl transition-shadow modern-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"h-8 w-8 text-orange-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Team Collaboration</h3>\n                <p className=\"text-gray-600\">\n                  Work together with real-time file sharing and permission management.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card text-center p-6 hover:shadow-2xl transition-shadow modern-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Zap className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Lightning Fast</h3>\n                <p className=\"text-gray-600\">\n                  Optimized for speed with global CDN delivery and instant file access.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card text-center p-6 hover:shadow-2xl transition-shadow modern-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Cloud className=\"h-8 w-8 text-indigo-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">AI-Powered</h3>\n                <p className=\"text-gray-600\">\n                  Intelligent file organization and search powered by advanced AI algorithms.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20\" style={{ backgroundColor: 'darkturquoise' }}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center glass-card modern-shadow\">\n          <h2 className=\"text-3xl font-bold mb-4 drop-shadow-lg\" style={{ color: 'navy' }}>\n            Ready to revolutionize your file storage?\n          </h2>\n          <p className=\"text-xl mb-8 max-w-2xl mx-auto\" style={{ color: 'red' }}>\n            Join thousands of users who trust AI Storage for their most important files.\n          </p>\n          <div style={{ padding: '1.5rem 0' }}>\n            <button\n              onClick={handleSignup}\n              className=\"modern-btn text-lg\"\n              style={{ padding: '1rem 2.5rem' }}\n            >\n              Start Your Free Trial\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n    <footer\n      className=\"text-white py-12 modern-shadow\"\n      style={{ backgroundColor: 'navy' }}\n    >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-primary rounded flex items-center justify-center\">\n              <Cloud className=\"h-5 w-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold\">AI Storage</span>\n          </div>\n          <p className=\"text-gray-400\">\n            ¬© 2025 AI Storage Solution. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9221},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Cloud, Mail, Lock, Loader2 } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, navigate] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        // Invalidate auth queries to refresh user data\n        await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        navigate(\"/dashboard\");\n      } else {\n        setError(result.message || 'Login failed');\n      }\n    } catch (err) {\n      setError('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <Cloud className=\"h-7 w-7 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">AI Storage</h1>\n              <p className=\"text-sm text-gray-500\">Cloud Solution</p>\n            </div>\n          </div>\n        </div>\n\n  <Card className=\"w-full\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl text-center\">Welcome back</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your email and password to access your account\n            </CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <CardContent className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"name@example.com\"\n                    className=\"pl-10\"\n                    {...register(\"email\")}\n                  />\n                </div>\n                {errors.email && (\n                  <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    className=\"pl-10\"\n                    {...register(\"password\")}\n                  />\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-red-600\">{errors.password.message}</p>\n                )}\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col space-y-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n              >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Sign In\n              </Button>\n              \n              <div className=\"text-center text-sm\">\n                <span className=\"text-gray-600\">Don't have an account? </span>\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto text-primary\"\n                  onClick={() => navigate(\"/signup\")}\n                >\n                  Sign up\n                </Button>\n              </div>\n              \n              <div className=\"text-center\">\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto text-sm text-gray-600\"\n                  onClick={() => navigate(\"/\")}\n                >\n                  ‚Üê Back to home\n                </Button>\n              </div>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5750},"client/src/pages/my-files.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigation } from \"@/hooks/useNavigation\";\nimport Sidebar from \"@/components/sidebar\";\nimport FileUpload from \"@/components/file-upload\";\nimport FileTable from \"@/components/file-table\";\nimport Breadcrumb from \"@/components/breadcrumb\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Folder, File } from \"lucide-react\";\n\nexport default function MyFiles() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { currentLocation } = useNavigation();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 p-6 bg-aqua\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8 rounded-2xl p-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">\n              {currentLocation.name || 'My Files'}\n            </h2>\n            <p className=\"text-gray-700 mt-1\">Browse and manage your files</p>\n          </div>\n        </div>\n\n        {/* Breadcrumb Navigation */}\n        <Breadcrumb />\n\n        {/* File Upload Zone */}\n        <FileUpload />\n\n        {/* File Management */}\n        <Card className=\"mt-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                {currentLocation.type === 'root' ? 'All Files' : \n                 currentLocation.type === 's3-bucket' ? 'Bucket Contents' : \n                 'Folder Contents'}\n              </h3>\n            </div>\n            \n            <FileTable />\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":2435},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  User, \n  HelpCircle, \n  Settings as SettingsIcon,\n  ChevronRight,\n  Mail,\n  Lock\n} from \"lucide-react\";\n\nexport default function Settings() {\n  return (\n    <div className=\"flex min-h-screen bg-aqua\">\n      <Sidebar />\n      \n      <main className=\"flex-1 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Settings</h2>\n            <p className=\"text-gray-600 mt-1\">Manage your account settings and preferences</p>\n          </div>\n        </div>\n\n        {/* Settings Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Settings - Takes 2 columns on large screens */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Change Email Card */}\n              <Card className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm hover:-translate-y-1\">\n                <Link href=\"/settings/change-email\" className=\"block\" data-testid=\"link-change-email\">\n                  <CardHeader className=\"space-y-3 pb-4\">\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"h-12 w-12 rounded-lg bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                          <Mail className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                        </div>\n                        <span className=\"text-lg font-semibold text-gray-900 dark:text-white\">Change Email</span>\n                      </div>\n                      <ChevronRight className=\"h-5 w-5 text-gray-400 group-hover:text-blue-600 group-hover:translate-x-1 transition-all duration-300\" />\n                    </CardTitle>\n                    <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n                      Update your email address for account notifications and login\n                    </CardDescription>\n                  </CardHeader>\n                </Link>\n              </Card>\n\n              {/* Change Password Card */}\n              <Card className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm hover:-translate-y-1\">\n                <Link href=\"/settings/change-password\" className=\"block\" data-testid=\"link-change-password\">\n                  <CardHeader className=\"space-y-3 pb-4\">\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"h-12 w-12 rounded-lg bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                          <Lock className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                        </div>\n                        <span className=\"text-lg font-semibold text-gray-900 dark:text-white\">Change Password</span>\n                      </div>\n                      <ChevronRight className=\"h-5 w-5 text-gray-400 group-hover:text-purple-600 group-hover:translate-x-1 transition-all duration-300\" />\n                    </CardTitle>\n                    <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n                      Update your password to keep your account secure\n                    </CardDescription>\n                  </CardHeader>\n                </Link>\n              </Card>\n\n              {/* Help Card */}\n              <Card className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm hover:-translate-y-1\">\n                <Link href=\"/settings/help\" className=\"block\" data-testid=\"link-help\">\n                  <CardHeader className=\"space-y-3 pb-4\">\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"h-12 w-12 rounded-lg bg-green-100 dark:bg-green-900/20 flex items-center justify-center group-hover:scale-110 transition-transform\">\n                          <HelpCircle className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                        </div>\n                        <span className=\"text-lg font-semibold text-gray-900 dark:text-white\">Help & Support</span>\n                      </div>\n                      <ChevronRight className=\"h-5 w-5 text-gray-400 group-hover:text-green-600 group-hover:translate-x-1 transition-all duration-300\" />\n                    </CardTitle>\n                    <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n                      Get help and support for your account\n                    </CardDescription>\n                  </CardHeader>\n                </Link>\n              </Card>\n\n            </div>\n          </div>\n\n          {/* Quick Actions Sidebar - Takes 1 column on large screens */}\n          <div className=\"space-y-6\">\n            <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">Quick Actions</CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n                  Common settings and account actions\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start border-gray-200 dark:border-gray-700 hover:bg-blue-50 dark:hover:bg-blue-900/20 hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200 hover:shadow-md\" \n                  asChild \n                  data-testid=\"button-edit-profile\"\n                >\n                  <Link href=\"/settings/edit-profile\" className=\"flex items-center gap-3\">\n                    <div className=\"h-8 w-8 rounded-lg bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center\">\n                      <User className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <span>Edit Profile</span>\n                  </Link>\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start border-gray-200 dark:border-gray-700 hover:bg-green-50 dark:hover:bg-green-900/20 hover:border-green-300 dark:hover:border-green-600 transition-all duration-200 hover:shadow-md\" \n                  asChild \n                  data-testid=\"button-help\"\n                >\n                  <Link href=\"/settings/help\" className=\"flex items-center gap-3\">\n                    <div className=\"h-8 w-8 rounded-lg bg-green-100 dark:bg-green-900/20 flex items-center justify-center\">\n                      <HelpCircle className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <span>Get Help</span>\n                  </Link>\n                </Button>\n                \n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":7787},"client/src/pages/shared.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Download, \n  FileText, \n  FileImage, \n  File as FileIcon,\n  Folder,\n  Copy\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function Shared() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: fileData, isLoading: filesLoading } = useQuery<{files: any[], folders: any[]}>({\n    queryKey: [\"/api/files\"],\n    retry: false,\n  });\n\n  const files = fileData?.files || [];\n  const folders = fileData?.folders || [];\n  const sharedFiles = files.filter(file => file.isShared);\n  const sharedFolders = folders.filter(folder => folder.isShared);\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) {\n      return <FileImage className=\"h-5 w-5 text-purple-600\" />;\n    } else if (mimeType.includes('pdf')) {\n      return <FileText className=\"h-5 w-5 text-red-600\" />;\n    } else if (mimeType.includes('spreadsheet') || mimeType.includes('excel')) {\n      return <FileText className=\"h-5 w-5 text-green-600\" />;\n    } else {\n      return <FileIcon className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  const copyShareLink = async (token: string, type: 'file' | 'folder') => {\n    const baseUrl = window.location.origin;\n    const shareUrl = `${baseUrl}/api/shared/${type}/${token}`;\n    \n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      toast({\n        title: \"Copied!\",\n        description: \"Share link copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to copy\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 p-6 bg-aqua\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Shared Items</h2>\n            <p className=\"text-gray-600 mt-1\">Files and folders you've shared with others</p>\n          </div>\n        </div>\n\n        {/* Shared Folders */}\n        {sharedFolders.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Shared Folders</h3>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {sharedFolders.map((folder) => (\n                      <TableRow key={folder.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center\">\n                              <Folder className=\"h-5 w-5 text-blue-600\" />\n                            </div>\n                            <span className=\"font-medium\">{folder.name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {formatDistanceToNow(new Date(folder.createdAt), { addSuffix: true })}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => copyShareLink(folder.shareToken, 'folder')}\n                          >\n                            <Copy className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Shared Files */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Shared Files</h3>\n            \n            {filesLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : sharedFiles.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No shared files yet</p>\n                <p className=\"text-sm text-gray-400\">Share files to see them here</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Size</TableHead>\n                      <TableHead>Shared</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {sharedFiles.map((file) => (\n                      <TableRow key={file.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-gray-100 rounded flex items-center justify-center\">\n                              {getFileIcon(file.mimeType)}\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-gray-900\">{file.name}</p>\n                              <p className=\"text-sm text-gray-500\">/{file.originalName}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-gray-600\">\n                          {formatFileSize(file.size)}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                            Shared\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => copyShareLink(file.shareToken, 'file')}\n                          >\n                            <Copy className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":8381},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Cloud, Mail, Lock, User, Loader2 } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\nconst signupSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters long\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const [, navigate] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  const { register, handleSubmit, formState: { errors } } = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n  });\n\n  const onSubmit = async (data: SignupFormData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        // Invalidate auth queries to refresh user data\n        await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        navigate(\"/dashboard\");\n      } else {\n        setError(result.message || 'Signup failed');\n      }\n    } catch (err) {\n      setError('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <Cloud className=\"h-7 w-7 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">AI Storage</h1>\n              <p className=\"text-sm text-gray-500\">Cloud Solution</p>\n            </div>\n          </div>\n        </div>\n\n  <Card className=\"w-full\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl text-center\">Create your account</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your details to get started with AI Storage\n            </CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <CardContent className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"John\"\n                      className=\"pl-10\"\n                      {...register(\"firstName\")}\n                    />\n                  </div>\n                  {errors.firstName && (\n                    <p className=\"text-sm text-red-600\">{errors.firstName.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      placeholder=\"Doe\"\n                      className=\"pl-10\"\n                      {...register(\"lastName\")}\n                    />\n                  </div>\n                  {errors.lastName && (\n                    <p className=\"text-sm text-red-600\">{errors.lastName.message}</p>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"name@example.com\"\n                    className=\"pl-10\"\n                    {...register(\"email\")}\n                  />\n                </div>\n                {errors.email && (\n                  <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a strong password\"\n                    className=\"pl-10\"\n                    {...register(\"password\")}\n                  />\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-red-600\">{errors.password.message}</p>\n                )}\n                <p className=\"text-xs text-gray-500\">\n                  Password must be at least 8 characters long\n                </p>\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col space-y-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n              >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Create Account\n              </Button>\n              \n              <div className=\"text-center text-sm\">\n                <span className=\"text-gray-600\">Already have an account? </span>\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto text-primary\"\n                  onClick={() => navigate(\"/login\")}\n                >\n                  Sign in\n                </Button>\n              </div>\n              \n              <div className=\"text-center\">\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto text-sm text-gray-600\"\n                  onClick={() => navigate(\"/\")}\n                >\n                  ‚Üê Back to home\n                </Button>\n              </div>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7513},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 hover:shadow-md hover:-translate-y-0.5 active:translate-y-0\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 hover:shadow-md hover:-translate-y-0.5 active:translate-y-0\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground hover:border-accent hover:shadow-sm hover:-translate-y-0.5 active:translate-y-0\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 hover:shadow-md hover:-translate-y-0.5 active:translate-y-0\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground hover:shadow-sm\",\n        link: \"text-primary underline-offset-4 hover:underline hover:text-primary/80\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2209},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent, DialogDescription } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <DialogDescription className=\"sr-only\">\n          Command palette for quick actions and navigation\n        </DialogDescription>\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":5040},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}